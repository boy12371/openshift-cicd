#部署cicd模板
kind: Template
apiVersion: v1
metadata:
  name: cicd-persistent
  creationTimestamp: null
  annotations:
    openshift.io/display-name: CI/CD (Persistent)
    description: |-
      All resource for cicd, with persistent storage.
    iconClass: icon-jenkins
    tags: nexus, gogs, mysql, postgresql, jenkins, sonarqube
labels:
  template: cicd-persistent-template
  group: cicd
message: Simple deploy CI/CD
#参数
parameters:
#当前项目名称
- name: NAMESPACE
  displayName: Current Project Namespace
  description: Name of the current project namespace.
  value: 'cicd'
#当前模板名称
- name: TEMPLATE
  displayName: Current Template Name
  description: Name of the current template name.
  value: 'cicd-persistent-template'
#Gogs容器名称
- name: GOGS_SERVICE
  displayName: GOGS Service Name
  description: The name of the OpenShift Service exposed for the Gogs container.
  value: gogs
#Postgresql数据库容器名称
- name: POSTGRESQL_SERVICE
  displayName: PostgreSQL Service Name
  description: The name of the OpenShift Service exposed for the PostgreSQL container.
  value: postgresql
#Nexus容器名称
- name: NEXUS_SERVICE
  displayName: Nexus Service Name
  description: The name of the OpenShift Service exposed for the Nexus container.
  value: nexus
#SonarQube容器名称
- name: SONARQUBE_SERVICE
  displayName: SonarQube Service Name
  description: The name of the OpenShift Service exposed for the SonarQube container.
  value: sonarqube
#Jenkins容器名称
- name: JENKINS_SERVICE
  displayName: Jenkins Service Name
  description: The name of the OpenShift Service exposed for the Jenkins container.
  value: jenkins
#Gogs数据库用户名
- name: GOGS_POSTGRESQL_USER
  displayName: Gogs PostgreSQL User
  description: Username for Gogs PostgreSQL backend
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
#Gogs数据库密码
- name: GOGS_POSTGRESQL_PASSWORD
  displayName: Gogs PostgreSQL Password
  description: Password for Gogs PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#Gogs数据库名
- name: GOGS_POSTGRESQL_DATABASE
  displayName: Gogs PostgreSQL Datebase Name
  description: Datebase Name for Gogs PostgreSQL backend
  from: gogs[A-Z0-9]{3}
  generate: expression
  required: true
#SonarQube数据库用户名
- name: SONARQUBE_POSTGRESQL_USER
  displayName: SonarQube PostgreSQL User
  description: Username for SonarQube PostgreSQL backend
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
#SonarQube数据库密码
- name: SONARQUBE_POSTGRESQL_PASSWORD
  displayName: SonarQube PostgreSQL Password
  description: Password for SonarQube PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#SonarQube数据库名
- name: SONARQUBE_POSTGRESQL_DATABASE
  displayName: SonarQube PostgreSQL Datebase Name
  description: Datebase Name for SonarQube PostgreSQL backend
  from: sona[A-Z0-9]{3}
  generate: expression
  required: true
#激活openshift登录
- name: ENABLE_OAUTH
  displayName: Enable OAuth
  description: |-
    Whether to enable OAuth OpenShift integration. If false, the static
    account 'admin' will be initialized with the password 'password'.
  value: 'true'
#JVM架构
- name: JVM_ARCH
  displayName: JVM Architecture
  description: Whether container runs with a 32 bit (i386) or 64 bit (x86_64) JVM.
  value: i386
#日志信息存放路径
- name: LOG_MESSAGE
  displayName: Termination Message Path
  description: Maximum amount of memory the container can use.
  value: /dev/termination-log
#部署超时
- name: TIME_OUT
  displayName: timeout seconds
  description: Deployment params timeout seconds
  value: '600'
#镜像所在项目名称
- name: IMAGE_NAMESPACE
  displayName: Cicd ImageStream Namespace
  description: The OpenShift Namespace where the Cicd ImageStream resides.
  value: openshift
#CST时区
- name: SERVER_TIMEZONE
  displayName: CST Timezone
  description: China Standard Time for POD
  value: Asia/Shanghai
#Dev项目名称
- name: DEV_PROJECT
  displayName: Tasks - Dev
  description: DEV project name
  value: dev
  required: true
#Test项目名称
- name: TEST_PROJECT
  displayName: Tasks - Test
  description: Test project name
  value: test
  required: true
#Stage项目名称
- name: STAGE_PROJECT
  displayName: Tasks - Stage
  description: STAGE project name
  value: stage
  required: true
objects:
#Gogs服务账户
- kind: ServiceAccount
  apiVersion: v1
  groupNames: "${NAMESPACE}"
  metadata:
    name: "${GOGS_SERVICE}"
#Gogs的postgresql服务账户
- kind: ServiceAccount
  apiVersion: v1
  groupNames: "${NAMESPACE}"
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
#Nexus服务账户
- kind: ServiceAccount
  apiVersion: v1
  groupNames: "${NAMESPACE}"
  metadata:
    name: "${NEXUS_SERVICE}"
#Sonarqube服务账户
- kind: ServiceAccount
  apiVersion: v1
  groupNames: "${NAMESPACE}"
  metadata:
    name: "${SONARQUBE_SERVICE}"
#PostgreSQL-Sonarqube服务账户
- kind: ServiceAccount
  apiVersion: v1
  groupNames: "${NAMESPACE}"
  metadata:
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
#Jenkins服务账户
- kind: ServiceAccount
  apiVersion: v1
  groupNames: "${NAMESPACE}"
  metadata:
    name: "${JENKINS_SERVICE}"
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE}"}}'
#Gogs角色绑定
- kind: RoleBinding
  apiVersion: v1
  groupNames: null
  metadata:
    name: "${GOGS_SERVICE}_edit"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${GOGS_SERVICE}"
#PostgreSQL-Gogs角色绑定
- kind: RoleBinding
  apiVersion: v1
  groupNames: null
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}_edit"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
#Nexus角色绑定
- kind: RoleBinding
  apiVersion: v1
  groupNames: null
  metadata:
    name: "${NEXUS_SERVICE}_edit"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${NEXUS_SERVICE}"
#Sonarqube角色绑定
- kind: RoleBinding
  apiVersion: v1
  groupNames: null
  metadata:
    name: "${SONARQUBE_SERVICE}_edit"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${SONARQUBE_SERVICE}"
#PostgreSQL-Sonarqube角色绑定
- kind: RoleBinding
  apiVersion: v1
  groupNames: null
  metadata:
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}_edit"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
#Jenkins角色绑定
- kind: RoleBinding
  apiVersion: v1
  groupNames: null
  metadata:
    name: "${JENKINS_SERVICE}_edit"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${JENKINS_SERVICE}"
#Gogs路由
- kind: Route
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: Route for Gogs http service.
    name: "${GOGS_SERVICE}"
    labels:
      app: "${GOGS_SERVICE}"
  spec:
    port:
      targetPort: "${GOGS_SERVICE}-tcp"
    to:
      kind: Service
      name: "${GOGS_SERVICE}"
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
#Nexus路由
- kind: Route
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: Route for Nexus http service.
    name: "${NEXUS_SERVICE}"
    labels:
      app: "${NEXUS_SERVICE}"
  spec:
    port:
      targetPort: "${NEXUS_SERVICE}-tcp"
    to:
      kind: Service
      name: "${NEXUS_SERVICE}"
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
#SonarQube的路由
- kind: Route
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: Route for SonarQube http service.
    name: "${SONARQUBE_SERVICE}"
    labels:
      app: "${SONARQUBE_SERVICE}"
  spec:
    port:
      targetPort: "${SONARQUBE_SERVICE}-tcp"
    to:
      kind: Service
      name: "${SONARQUBE_SERVICE}"
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
#Jenkins路由
- kind: Route
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: Route for Jenkins http service.
    name: "${JENKINS_SERVICE}"
    labels:
      app: "${JENKINS_SERVICE}"
  spec:
    port:
      targetPort: "${JENKINS_SERVICE}-tcp"
    to:
      kind: Service
      name: "${JENKINS_SERVICE}"
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
#Gogs存储
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: "${NAMESPACE}-${GOGS_SERVICE}-pv"
    labels:
      provider: "${GOGS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    capacity:
      storage: 40Gi
    accessModes:
    - ReadWriteOnce
    hostPath:
      path: "/var/lib/docker/data/${GOGS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
      name: "${GOGS_SERVICE}-data"
      namespace: "${NAMESPACE}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${GOGS_SERVICE}-data"
    labels:
      provider: "${GOGS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 40Gi
    volumeName: "${NAMESPACE}-${GOGS_SERVICE}-pv"
#Gogs数据库存储
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-pv"
    labels:
      provider: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    capacity:
      storage: 5Gi
    accessModes:
    - ReadWriteOnce
    hostPath:
      path: "/var/lib/docker/data/${POSTGRESQL_SERVICE}-storage/${NAMESPACE}/${GOGS_SERVICE}/"
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
      name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
      namespace: "${NAMESPACE}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
    labels:
      provider: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-pv"
#Nexus存储
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: "${NAMESPACE}-${NEXUS_SERVICE}-pv"
    labels:
      provider: "${NEXUS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    capacity:
      storage: 20Gi
    accessModes:
    - ReadWriteOnce
    hostPath:
      path: "/var/lib/docker/data/${NEXUS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
      name: "${NEXUS_SERVICE}-data"
      namespace: "${NAMESPACE}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${NEXUS_SERVICE}-data"
    labels:
      provider: "${NEXUS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20Gi
    volumeName: "${NAMESPACE}-${NEXUS_SERVICE}-pv"
#Sonarqube存储
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: "${NAMESPACE}-${SONARQUBE_SERVICE}-home-pv"
    labels:
      provider: "${SONARQUBE_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    capacity:
      storage: 10Gi
    accessModes:
    - ReadWriteOnce
    hostPath:
      path: "/var/lib/docker/data/${SONARQUBE_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
      name: "${SONARQUBE_SERVICE}-home"
      namespace: "${NAMESPACE}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${SONARQUBE_SERVICE}-home"
    labels:
      provider: "${SONARQUBE_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    volumeName: "${NAMESPACE}-${SONARQUBE_SERVICE}-home-pv"
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: "${NAMESPACE}-${SONARQUBE_SERVICE}-data-pv"
    labels:
      provider: "${SONARQUBE_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    capacity:
      storage: 1Gi
    accessModes:
    - ReadWriteOnce
    hostPath:
      path: "/var/lib/docker/data/${SONARQUBE_SERVICE}-storage/${NAMESPACE}/data/"
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
      name: "${SONARQUBE_SERVICE}-data"
      namespace: "${NAMESPACE}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${SONARQUBE_SERVICE}-data"
    labels:
      provider: "${SONARQUBE_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    volumeName: "${NAMESPACE}-${SONARQUBE_SERVICE}-data-pv"
#Sonarqube数据库存储
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-pv"
    labels:
      provider: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    capacity:
      storage: 2Gi
    accessModes:
    - ReadWriteOnce
    hostPath:
      path: "/var/lib/docker/data/${POSTGRESQL_SERVICE}-storage/${NAMESPACE}/${SONARQUBE_SERVICE}/"
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
      name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-data"
      namespace: "${NAMESPACE}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-data"
    labels:
      provider: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    volumeName: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-pv"
#Jenkins存储
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: "${NAMESPACE}-jenkins-pv"
    labels:
      provider: "${JENKINS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    capacity:
      storage: 10Gi
    accessModes:
    - ReadWriteOnce
    hostPath:
      path: "/var/lib/docker/data/${JENKINS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
    claimRef:
      name: "${JENKINS_SERVICE}-data"
      namespace: "${NAMESPACE}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${JENKINS_SERVICE}-data"
    labels:
      provider: "${JENKINS_SERVICE}"
      project: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    volumeName: "${NAMESPACE}-${JENKINS_SERVICE}-pv"
#Gogs的部署配置
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    annotations:
      description: The DeploymentConfig for Gogs
    name: "${GOGS_SERVICE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
  spec:
    replicas: 1
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${GOGS_SERVICE}"
        from:
          kind: ImageStreamTag
          name: gogs:0.11.4
          namespace: "${IMAGE_NAMESPACE}"
      lastTriggeredImage: ''
    template:
      metadata:
        creationTimestamp: null
        annotations:
          openshift.io/container.gogs.image.entrypoint: '["docker/start.sh","/bin/s6-svscan","/app/gogs/docker/s6/"]'
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${GOGS_SERVICE}"
      spec:
        serviceAccountName: "${GOGS_SERVICE}"
        containers:
        - name: "${GOGS_SERVICE}"
          image: openshift/gogs:0.11.4
          imagePullPolicy: IfNotPresent
          env:
          - name: TZ
            value: "${SERVER_TIMEZONE}"
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          ports:
          - containerPort: 3000
            protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 512Mi
          terminationMessagePath: "${LOG_MESSAGE}"
          volumeMounts:
          - name: "${GOGS_SERVICE}-data"
            mountPath: /data
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: "${GOGS_SERVICE}-data"
          persistentVolumeClaim:
            claimName: "${GOGS_SERVICE}-data"
    test: false
  status: {}
#Gogs的postgresql数据库部署配置
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: The DeploymentConfig for Gogs Postgresql
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    labels:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
  spec:
    replicas: 1
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${POSTGRESQL_SERVICE}"
        from:
          kind: ImageStreamTag
          name: postgresql-95-centos7:latest
          namespace: "${IMAGE_NAMESPACE}"
        lastTriggeredImage: ''
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      spec:
        serviceAccountName: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
        containers:
        - name: "${POSTGRESQL_SERVICE}"
          image: ' '
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRESQL_USER
            value: "${GOGS_POSTGRESQL_USER}"
          - name: POSTGRESQL_PASSWORD
            value: "${GOGS_POSTGRESQL_PASSWORD}"
          - name: POSTGRESQL_DATABASE
            value: "${GOGS_POSTGRESQL_DATABASE}"
          - name: TZ
            value: "${SERVER_TIMEZONE}"
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
          - containerPort: 5432
            protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 512Mi
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "${LOG_MESSAGE}"
          volumeMounts:
          - name: "${POSTGRESQL_SERVICE}-data"
            mountPath: /var/lib/pgsql/data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: "${POSTGRESQL_SERVICE}-data"
          persistentVolumeClaim:
            claimName: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
    test: false
  status: {}
#Nexus部署配置
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: The DeploymentConfig for Nexus
    name: "${NEXUS_SERVICE}"
    labels:
      app: "${NEXUS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
  spec:
    replicas: 1
    selector:
      app: "${NEXUS_SERVICE}"
      deploymentconfig: "${NEXUS_SERVICE}"
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${NEXUS_SERVICE}"
        from:
          kind: ImageStreamTag
          name: nexus:2.14.4
          namespace: "${IMAGE_NAMESPACE}"
        lastTriggeredImage: ''
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${NEXUS_SERVICE}"
          deploymentconfig: "${NEXUS_SERVICE}"
      spec:
        serviceAccountName: "${NEXUS_SERVICE}"
        containers:
        - name: "${NEXUS_SERVICE}"
          image: ' '
          imagePullPolicy: IfNotPresent
          env:
          - name: CONTEXT_PATH
            value: /
          - name: TZ
            value: "${SERVER_TIMEZONE}"
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 8081
              path: /content/groups/public/
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 8081
              path: /content/groups/public/
            timeoutSeconds: 5
          ports:
          - containerPort: 8081
            protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 512Mi
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "${LOG_MESSAGE}"
          volumeMounts:
          - name: "${NEXUS_SERVICE}-data"
            mountPath: /sonatype-work
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: "${NEXUS_SERVICE}-data"
          persistentVolumeClaim:
            claimName: "${NEXUS_SERVICE}-data"
    test: false
  status: {}
#SonarQube的部署配置
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: The DeploymentConfig for SonarQube
    name: "${SONARQUBE_SERVICE}"
    labels:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}"
  spec:
    replicas: 1
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}"
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SONARQUBE_SERVICE}"
        from:
          kind: ImageStreamTag
          name: sonarqube:6.3.1
          namespace: "${IMAGE_NAMESPACE}"
        lastTriggeredImage: ''
    template:
      metadata:
        creationTimestamp: null
        annotations:
          openshift.io/container.sonarqube.image.entrypoint: '["./bin/run.sh"]'
        labels:
          app: "${SONARQUBE_SERVICE}"
          deploymentconfig: "${SONARQUBE_SERVICE}"
      spec:
        serviceAccountName: "${SONARQUBE_SERVICE}"
        containers:
        - name: "${SONARQUBE_SERVICE}"
          image: "${IMAGE_NAMESPACE}/sonarqube:6.3.1"
          imagePullPolicy: IfNotPresent
          env:
          - name: SONARQUBE_JDBC_PASSWORD
            value: "${SONARQUBE_POSTGRESQL_PASSWORD}"
          - name: SONARQUBE_JDBC_URL
            value: "jdbc:postgresql://${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}/${SONARQUBE_POSTGRESQL_DATABASE}"
          - name: SONARQUBE_JDBC_USERNAME
            value: "${SONARQUBE_POSTGRESQL_USER}"
          - name: TZ
            value: "${SERVER_TIMEZONE}"
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            httpGet:
              port: 9000
              path: /
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            httpGet:
              port: 9000
              path: /
            timeoutSeconds: 5
          ports:
          - containerPort: 9000
            protocol: TCP
          resources:
            limits:
              cpu: 2
              memory: 2Gi
          terminationMessagePath: "${LOG_MESSAGE}"
          volumeMounts:
          - name: "${SONARQUBE_SERVICE}-home"
            mountPath: /opt/sonarqube
          - name: "${SONARQUBE_SERVICE}-data"
            mountPath: /opt/sonarqube/data
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: "${SONARQUBE_SERVICE}-home"
          persistentVolumeClaim:
            claimName: "${SONARQUBE_SERVICE}-home"
        - name: "${SONARQUBE_SERVICE}-data"
          persistentVolumeClaim:
            claimName: "${SONARQUBE_SERVICE}-data"
    test: false
  status: {}
#SonarQube的postgresql数据库部署配置
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: The DeploymentConfig for SonarQube Postgresql
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    labels:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
  spec:
    replicas: 1
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${POSTGRESQL_SERVICE}"
        from:
          kind: ImageStreamTag
          name: postgresql-95-centos7:latest
          namespace: "${IMAGE_NAMESPACE}"
        lastTriggeredImage: ''
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${SONARQUBE_SERVICE}"
          deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
      spec:
        serviceAccountName: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
        containers:
        - name: "${POSTGRESQL_SERVICE}"
          image: ' '
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRESQL_USER
            value: "${SONARQUBE_POSTGRESQL_USER}"
          - name: POSTGRESQL_PASSWORD
            value: "${SONARQUBE_POSTGRESQL_PASSWORD}"
          - name: POSTGRESQL_DATABASE
            value: "${SONARQUBE_POSTGRESQL_DATABASE}"
          - name: TZ
            value: "${SERVER_TIMEZONE}"
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
          - containerPort: 5432
            protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 512Mi
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "${LOG_MESSAGE}"
          volumeMounts:
          - name: "${POSTGRESQL_SERVICE}-data"
            mountPath: /var/lib/pgsql/data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: "${POSTGRESQL_SERVICE}-data"
          persistentVolumeClaim:
            claimName: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-data"
    test: false
  status: {}
#Jenkins部署配置
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      description: The DeploymentConfig for Jenkins
    name: "${JENKINS_SERVICE}"
    labels:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
  spec:
    replicas: 1
    selector:
      name: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${JENKINS_SERVICE}"
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: "${IMAGE_NAMESPACE}"
        lastTriggeredImage: ''
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: "${JENKINS_SERVICE}"
          deploymentconfig: "${JENKINS_SERVICE}"
      spec:
        serviceAccountName: "${JENKINS_SERVICE}"
        containers:
        - name: "${JENKINS_SERVICE}"
          image: ' '
          imagePullPolicy: IfNotPresent
          env:
          - name: OPENSHIFT_ENABLE_OAUTH
            value: "${ENABLE_OAUTH}"
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: 'true'
          - name: OPENSHIFT_JENKINS_JVM_ARCH
            value: "${JVM_ARCH}"
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: 'true'
          - name: JNLP_SERVICE_NAME
            value: "${JENKINS_SERVICE}-jnlp"
          - name: TZ
            value: "${SERVER_TIMEZONE}"
          readinessProbe:
            initialDelaySeconds: 3
            httpGet:
              path: "/login"
              port: 8080
            timeoutSeconds: 3
          livenessProbe:
            initialDelaySeconds: 420
            failureThreshold: 30
            httpGet:
              path: "/login"
              port: 8080
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 512Mi
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "${LOG_MESSAGE}"
          volumeMounts:
          - name: "${JENKINS_SERVICE}-data"
            mountPath: "/var/lib/jenkins"
        restartPolicy: Always
        dnsPolicy: ClusterFirst
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: "${JENKINS_SERVICE}-data"
          persistentVolumeClaim:
            claimName: "${JENKINS_SERVICE}-data"
#Gogs服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs
      service.alpha.openshift.io/dependencies: '[{"name": "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
    - name: "${GOGS_SERVICE}-tcp"
      protocol: TCP
      port: 3000
      targetPort: 3000
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
    clusterIP: 172.30.10.10
    type: ClusterIP
    sessionAffinity: None
#Gogs的postgresql数据库服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs Postgresql
  spec:
    ports:
    - name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-tcp"
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    clusterIP: 172.30.10.11
    type: ClusterIP
    sessionAffinity: None
#Nexus服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${NEXUS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: Sonatype Nexus repository manager http port
  spec:
    ports:
    - name: "${NEXUS_SERVICE}-tcp"
      protocol: TCP
      port: 8081
      targetPort: 8081
    selector:
      app: "${NEXUS_SERVICE}"
      deploymentconfig: "${NEXUS_SERVICE}"
    clusterIP: 172.30.10.12
    type: ClusterIP
    sessionAffinity: None
#SonarQube的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for SonarQube
      service.alpha.openshift.io/dependencies: '[{"name": "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
    - name: "${SONARQUBE_SERVICE}-tcp"
      protocol: TCP
      port: 9000
      targetPort: 9000
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}"
    clusterIP: 172.30.10.13
    type: ClusterIP
    sessionAffinity: None
#SonarQube的postgresql数据库服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for SonarQube Postgresql
  spec:
    ports:
    - name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-tcp"
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    clusterIP: 172.30.10.14
    type: ClusterIP
    sessionAffinity: None
#Jenkins服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins
      service.alpha.openshift.io/dependencies: '[{"name": "${JENKINS_SERVICE}-jnlp", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
    - name: "${JENKINS_SERVICE}-tcp"
      protocol: TCP
      port: 80
      targetPort: 8080
    selector:
      name: "${JENKINS_SERVICE}"
    clusterIP: 172.30.10.15
    type: ClusterIP
    sessionAffinity: None
#Jenkins的Jnlp服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}-jnlp"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins Jnlp
  spec:
    ports:
    - name: "${JENKINS_SERVICE}-jnlp-tcp"
      protocol: TCP
      port: 50000
      targetPort: 50000
    selector:
      name: "${JENKINS_SERVICE}"
    clusterIP: 172.30.10.16
    type: ClusterIP
    sessionAffinity: None
#Jboss Pipeline
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: jboss-pipeline
      name: jboss-pipeline
    name: jboss-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node {
             // define commands
             def mvnCmd = "mvn -s configuration/cicd-settings.xml"
             def branchName = "date +%Y%m%d%H%M%S"

             stage ('Push to gogs') {
               sh "git svn clone http://svn.ipaas.zhonglele.com/projects/branches/zk-finance"
               sh "cd zk-finance && echo '# zk-finance' > README.md"
               sh "echo '.settings' > .gitignore"
               sh "echo '.classpath' >> .gitignore"
               sh "echo '.project' >> .gitignore"
               sh "git add . && git commit -m \"${branchName}\""
               sh "git remote add origin http://gogs:3000/gogs/zk-finance.git"
               sh "git push origin master:${branchName}"
               sh "cd .. && rm -rf zk-finance"
             }

             stage ('Build') {
               git branch: '${branchName}', url: 'http://gogs:3000/gogs/zk-finance.git'
               sh "${mvnCmd} clean install -DskipTests=true"
             }

             stage ('Test and Analysis') {
               parallel (
                   'Test': {
                       sh "${mvnCmd} test"
                       step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                   },
                   'Static Analysis': {
                       sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                   }
               )
             }

             stage ('Push to Nexus') {
              sh "${mvnCmd} deploy -DskipTests=true"
             }

             stage ('Deploy DEV') {
               sh "rm -rf oc-build && mkdir -p oc-build/deployments"
               sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
               sh "oc project ${DEV_PROJECT}"
               // clean up. keep the image stream
               sh "oc delete bc,dc,svc,route -l app=tasks -n ${DEV_PROJECT}"
               // create build. override the exit code since it complains about exising imagestream
               sh "oc new-build --name=tasks --image-stream=jboss-eap70-openshift --binary=true --labels=app=tasks -n ${DEV_PROJECT} || true"
               // build image
               sh "oc start-build tasks --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
               // deploy image
               sh "oc new-app tasks:latest -n ${DEV_PROJECT}"
               sh "oc expose svc/tasks -n ${DEV_PROJECT}"
             }

             stage ('Deploy STAGE') {
               timeout(time:5, unit:'MINUTES') {
                  input message: "Promote to STAGE?", ok: "Promote"
               }

               def v = version()
               // tag for stage
               sh "oc tag ${DEV_PROJECT}/tasks:latest ${STAGE_PROJECT}/tasks:${v}"
               sh "oc project ${STAGE_PROJECT}"
               // clean up. keep the imagestream
               sh "oc delete bc,dc,svc,route -l app=tasks -n ${STAGE_PROJECT}"
               // deploy stage image
               sh "oc new-app tasks:${v} -n ${STAGE_PROJECT}"
               sh "oc expose svc/tasks -n ${STAGE_PROJECT}"
             }
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
#Nginx Pipeline
- kind: BuildConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "Nginx", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: nginx-pipeline
      name: nginx-pipeline
    name: nginx-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('nodejs') {
            stage('build') {
              openshiftBuild(buildConfig: 'Nginx', showBuildLogs: 'true')
            }
            stage('deploy') {
              openshiftDeploy(deploymentConfig: 'Nginx')
            }
          }
      type: JenkinsPipeline
  status:
    lastVersion: 0
