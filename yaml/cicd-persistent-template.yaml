#部署cicd模板
kind: Template
apiVersion: v1
metadata:
  name: cicd-persistent
  creationTimestamp: null
  annotations:
    openshift.io/display-name: CI/CD (Persistent)
    description: |-
      All resource for cicd, with persistent storage.
    iconClass: icon-jenkins
    tags: nexus, gogs, mysql, postgresql, jenkins, sonarqube, subversion
labels:
  template: cicd-persistent-template
  group: cicd
message: Simple deploy CI/CD
#参数
parameters:
#当前项目名称
- name: NAMESPACE
  displayName: Current Project Namespace
  description: Name of the current project namespace
  value: cicd
#当前模板名称
- name: TEMPLATE
  displayName: Current Template Name
  description: Name of the current template.
  value: cicd-persistent-template
#默认服务账户名称
- name: DEFAULT_NAME
  displayName: Default ServiceAccount Name
  description: Name of the default serviceaccount.
  value: default
#Postgresql数据库容器名称
- name: POSTGRESQL_SERVICE
  displayName: PostgreSQL Service Name
  description: The name of the OpenShift Service exposed for the PostgreSQL container.
  value: postgresql
#Gogs容器名称
- name: GOGS_SERVICE
  displayName: GOGS Service Name
  description: The name of the OpenShift Service exposed for the Gogs container.
  value: gogs
#Jenkins容器名称
- name: JENKINS_SERVICE
  displayName: Jenkins Service Name
  description: The name of the OpenShift Service exposed for the Jenkins container.
  value: jenkins
#Nexus容器名称
- name: NEXUS_SERVICE
  displayName: Nexus Service Name
  description: The name of the OpenShift Service exposed for the Nexus container.
  value: nexus
#SonarQube容器名称
- name: SONARQUBE_SERVICE
  displayName: SonarQube Service Name
  description: The name of the OpenShift Service exposed for the SonarQube container.
  value: sonarqube
#Subversion容器名称
- name: SUBVERSION_SERVICE
  displayName: Subversion Service Name
  description: The name of the OpenShift Service exposed for the Subversion container.
  value: subversion
#Gogs数据库用户名
- name: GOGS_POSTGRESQL_USER
  displayName: Gogs PostgreSQL User
  description: Username for Gogs PostgreSQL backend
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
#Gogs数据库密码
- name: GOGS_POSTGRESQL_PASSWORD
  displayName: Gogs PostgreSQL Password
  description: Password for Gogs PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#Gogs数据库名
- name: GOGS_POSTGRESQL_DATABASE
  displayName: Gogs PostgreSQL Datebase Name
  description: Datebase Name for Gogs PostgreSQL backend
  from: gogs[A-Z0-9]{3}
  generate: expression
  required: true
#SonarQube数据库用户名
- name: SONARQUBE_POSTGRESQL_USER
  displayName: SonarQube PostgreSQL User
  description: Username for SonarQube PostgreSQL backend
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
#SonarQube数据库密码
- name: SONARQUBE_POSTGRESQL_PASSWORD
  displayName: SonarQube PostgreSQL Password
  description: Password for SonarQube PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#SonarQube数据库名
- name: SONARQUBE_POSTGRESQL_DATABASE
  displayName: SonarQube PostgreSQL Datebase Name
  description: Datebase Name for SonarQube PostgreSQL backend
  from: sona[A-Z0-9]{3}
  generate: expression
  required: true
#激活openshift登录
- name: ENABLE_OAUTH
  displayName: Enable OAuth
  description: |-
    Whether to enable OAuth OpenShift integration. If false, the static
    account 'admin' will be initialized with the password 'password'.
  value: 'true'
#JVM架构
- name: JVM_ARCH
  displayName: JVM Architecture
  description: Whether container runs with a 32 bit (i386) or 64 bit (x86_64) JVM.
  value: i386
#日志信息存放路径
- name: LOG_MESSAGE
  displayName: Termination Message Path
  description: Maximum amount of memory the container can use.
  value: /dev/termination-log
#部署超时
- name: TIME_OUT
  displayName: timeout seconds
  description: Deployment params timeout seconds
  value: '600'
#镜像所在项目名称
- name: IMAGE_NAMESPACE
  displayName: Cicd ImageStream Namespace
  description: The OpenShift Namespace where the Cicd ImageStream resides.
  value: openshift
#CST时区
- name: SERVER_TIMEZONE
  displayName: CST Timezone
  description: China Standard Time for POD
  value: Asia/Shanghai
#Dev项目名称
- name: DEV_PROJECT
  displayName: Tasks - Dev
  description: DEV project name
  value: dev
  required: true
#Test项目名称
- name: TEST_PROJECT
  displayName: Tasks - Test
  description: Test project name
  value: test
  required: true
#Stage项目名称
- name: STAGE_PROJECT
  displayName: Tasks - Stage
  description: STAGE project name
  value: stage
  required: true
objects:
#创建jenkins服务账户
- apiVersion: v1
  kind: ServiceAccount
  groupNames: "${NAMESPACE}"
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE}"}}'
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
#创建default角色绑定
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    name: "${DEFAULT_NAME}_edit"
    namespace: "${NAMESPACE}"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${DEFAULT_NAME}"
    namespace: "${NAMESPACE}"
#创建jenkins角色绑定
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}_edit"
    namespace: "${NAMESPACE}"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
#Gogs的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
    annotations:
      description: Route for Gogs http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${GOGS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${GOGS_SERVICE}-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAIqh9C24phyUMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MDIxNzA4MjFaFw0xODA2MDMxNzA4MjFaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKqf8l0ZwWA7
        qnv7kMLFgrMXxuFsCv4KkcD4Nrx2gWOfVYDYU/oVQWtz1nriAA1ldDTy7DJGD1Rw
        sMCEwPq4p0O7mZk2kBUbtb9tOp5E9nOoY9mCFhEpqptjH7TBmPzMckW9fzPefdBU
        SM9aGlALLwtoJkTTnngPmPtVUVmZ1qqo19zlRdAldbo2dY3ELpQxgBApG1orFO7Q
        gt03xNJOos1QkLv9nAMDxbWkObBkN3SKUAb8mNW3Qm9y411wgQeffnTnultsCI5j
        D4vdnjFmgOO66UPm8KrAYYwJYK/KhZxbzDqekJGQT6PlA/q5V4bwd3jLNSCMqaKl
        S1tfM8Lu8+sCAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEATMHQ6y+z3abki9qsNrLXcbvJZR3mg7TfIVwlgWEtP7nFxnjDkB3v
        7C6gRY2p3oMvZGhuwEsQX7DC1LJQnWRZVjnJwt4jIwch2XoGsTrXq40kDRg+wHXd
        kx+iE1U113CW1X4Rdyoc841ZKZthbzDNQQUdY19znN0jN+OxAaHUUc8hjgAasFAb
        0ZRs8kztQCz55M/QtQyYEc/iC8mkCBMW5aKPVODCqp6GklRX0UTwjSJarLlC/zMB
        x8nRQDAh5WAjIdzUrnKm97T1Pd1FPWer/dScY78qJMteBz97KwItWMTYjSmLiyag
        EswyntcjwpceMIdhLOQjWSZp6a9BGmGfZQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCqn/JdGcFgO6p7
        +5DCxYKzF8bhbAr+CpHA+Da8doFjn1WA2FP6FUFrc9Z64gANZXQ08uwyRg9UcLDA
        hMD6uKdDu5mZNpAVG7W/bTqeRPZzqGPZghYRKaqbYx+0wZj8zHJFvX8z3n3QVEjP
        WhpQCy8LaCZE0554D5j7VVFZmdaqqNfc5UXQJXW6NnWNxC6UMYAQKRtaKxTu0ILd
        N8TSTqLNUJC7/ZwDA8W1pDmwZDd0ilAG/JjVt0JvcuNdcIEHn35057pbbAiOYw+L
        3Z4xZoDjuulD5vCqwGGMCWCvyoWcW8w6npCRkE+j5QP6uVeG8Hd4yzUgjKmipUtb
        XzPC7vPrAgMBAAECggEAdcd5LskTklE9it4JfFmIsgWstHi3UcuL90+fwRJwmIsp
        I4qw1UWM5haNLEALVzP8NnyljMKN3HT5nbtF1wxV8cxy568hYGDDYcONnijuksHf
        QwqoHurLKP4Qqd6ls4ORMhDv2Kcx4/f6Vp/U4AIIVHBtUj9d+XSS3pNzV015QE2y
        JvURLvm4CNiunj08xiP2KExoa9z/LTeqav6eb2353Gw/uqK5fBaLOGkMUbFnA8pH
        Saxr5nmf7N8JbEtYTm+TCL/TLKX8GhtakQxLoSFZAJ3ArYiDrg/3rFq4yohh2ftf
        vZAclI+6eHbiZ5Qj3D39Zac2VUCWVZi/PkhRb2CPoQKBgQDWykYFijdkMfObMfjQ
        sftE3YChsznI1umb49gHYkJpPKUfrWfOMXF9B/836YZ/Wq2qY/UL3McaMtzX0qp+
        UcI+zfPNI3K4U5uOVho3+waMxWQyi54isSgOGJObqAvevSUlKZd5MNliRkk6zIjP
        rjuCxI0D38HjRJK5gSJT7xv5GwKBgQDLXG3TdY4lQXn0wHdD20UbTC0er1C16wLm
        B/CKnYxRDAmNhvf5Bl+0GDRdHKN8WSpmIjgWwoxPeOMJmtn+g0ZjGlk8t4jPwDwU
        HG9j2aqQh2V4ZzWNUc0f2KYpxeXGXHzLoOvfG7KairgAZY7lFzK+E2GoCPlK9tf3
        vsuATWjtcQKBgEDqSzVba5hFnIl4FeoFEJrkkv7L6xfvFBWATAcXRFkH8iPbxbbE
        rLcMFq9wTazp2/jWUvYt2KLrYmF8EvkwfpN6rUd/gimBY08maLAolvcupTS9i6KS
        hjeUZ/AwXr4HzlUn99ax09FmyrURofuaffPssW3NT4z/aZTVGWnip0KnAoGAQGis
        7D2eYNRlIQzYeWh4cdXlsINMZ+HgUCURnYWazIyodefaoEfRhgPoidkpOpgvIpwR
        8bt6ny0lk4Q1KTRA1eChhOaIcWxsWt5KtXBaYl5P2BuwTWssMbr3neFtDi964y+7
        pTVrkyD+eDmyUYLQcn1G/+aftouKCZCneaKK6jECgYAuONkMqFKluG4a6nh+HRD/
        dQc5pf2QzTlhSJ9+dcnMu5qghlrVvK1aVuENbOTUzk2A6UIqJ4kGVaixln+Tatte
        PlRfR2XkMZlkg3k/8g/iI8Bz8bzOFD/RwZn6eaMaDgCAVXcxMsxKPcZLYMobJ7rL
        emSOjx+MYAM+sKB2j9vq2w==
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
#Jenkins的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
    annotations:
      description: Route for Jenkins http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${JENKINS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${JENKINS_SERVICE}-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAIqh9C24phyUMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MDIxNzA4MjFaFw0xODA2MDMxNzA4MjFaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKqf8l0ZwWA7
        qnv7kMLFgrMXxuFsCv4KkcD4Nrx2gWOfVYDYU/oVQWtz1nriAA1ldDTy7DJGD1Rw
        sMCEwPq4p0O7mZk2kBUbtb9tOp5E9nOoY9mCFhEpqptjH7TBmPzMckW9fzPefdBU
        SM9aGlALLwtoJkTTnngPmPtVUVmZ1qqo19zlRdAldbo2dY3ELpQxgBApG1orFO7Q
        gt03xNJOos1QkLv9nAMDxbWkObBkN3SKUAb8mNW3Qm9y411wgQeffnTnultsCI5j
        D4vdnjFmgOO66UPm8KrAYYwJYK/KhZxbzDqekJGQT6PlA/q5V4bwd3jLNSCMqaKl
        S1tfM8Lu8+sCAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEATMHQ6y+z3abki9qsNrLXcbvJZR3mg7TfIVwlgWEtP7nFxnjDkB3v
        7C6gRY2p3oMvZGhuwEsQX7DC1LJQnWRZVjnJwt4jIwch2XoGsTrXq40kDRg+wHXd
        kx+iE1U113CW1X4Rdyoc841ZKZthbzDNQQUdY19znN0jN+OxAaHUUc8hjgAasFAb
        0ZRs8kztQCz55M/QtQyYEc/iC8mkCBMW5aKPVODCqp6GklRX0UTwjSJarLlC/zMB
        x8nRQDAh5WAjIdzUrnKm97T1Pd1FPWer/dScY78qJMteBz97KwItWMTYjSmLiyag
        EswyntcjwpceMIdhLOQjWSZp6a9BGmGfZQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCqn/JdGcFgO6p7
        +5DCxYKzF8bhbAr+CpHA+Da8doFjn1WA2FP6FUFrc9Z64gANZXQ08uwyRg9UcLDA
        hMD6uKdDu5mZNpAVG7W/bTqeRPZzqGPZghYRKaqbYx+0wZj8zHJFvX8z3n3QVEjP
        WhpQCy8LaCZE0554D5j7VVFZmdaqqNfc5UXQJXW6NnWNxC6UMYAQKRtaKxTu0ILd
        N8TSTqLNUJC7/ZwDA8W1pDmwZDd0ilAG/JjVt0JvcuNdcIEHn35057pbbAiOYw+L
        3Z4xZoDjuulD5vCqwGGMCWCvyoWcW8w6npCRkE+j5QP6uVeG8Hd4yzUgjKmipUtb
        XzPC7vPrAgMBAAECggEAdcd5LskTklE9it4JfFmIsgWstHi3UcuL90+fwRJwmIsp
        I4qw1UWM5haNLEALVzP8NnyljMKN3HT5nbtF1wxV8cxy568hYGDDYcONnijuksHf
        QwqoHurLKP4Qqd6ls4ORMhDv2Kcx4/f6Vp/U4AIIVHBtUj9d+XSS3pNzV015QE2y
        JvURLvm4CNiunj08xiP2KExoa9z/LTeqav6eb2353Gw/uqK5fBaLOGkMUbFnA8pH
        Saxr5nmf7N8JbEtYTm+TCL/TLKX8GhtakQxLoSFZAJ3ArYiDrg/3rFq4yohh2ftf
        vZAclI+6eHbiZ5Qj3D39Zac2VUCWVZi/PkhRb2CPoQKBgQDWykYFijdkMfObMfjQ
        sftE3YChsznI1umb49gHYkJpPKUfrWfOMXF9B/836YZ/Wq2qY/UL3McaMtzX0qp+
        UcI+zfPNI3K4U5uOVho3+waMxWQyi54isSgOGJObqAvevSUlKZd5MNliRkk6zIjP
        rjuCxI0D38HjRJK5gSJT7xv5GwKBgQDLXG3TdY4lQXn0wHdD20UbTC0er1C16wLm
        B/CKnYxRDAmNhvf5Bl+0GDRdHKN8WSpmIjgWwoxPeOMJmtn+g0ZjGlk8t4jPwDwU
        HG9j2aqQh2V4ZzWNUc0f2KYpxeXGXHzLoOvfG7KairgAZY7lFzK+E2GoCPlK9tf3
        vsuATWjtcQKBgEDqSzVba5hFnIl4FeoFEJrkkv7L6xfvFBWATAcXRFkH8iPbxbbE
        rLcMFq9wTazp2/jWUvYt2KLrYmF8EvkwfpN6rUd/gimBY08maLAolvcupTS9i6KS
        hjeUZ/AwXr4HzlUn99ax09FmyrURofuaffPssW3NT4z/aZTVGWnip0KnAoGAQGis
        7D2eYNRlIQzYeWh4cdXlsINMZ+HgUCURnYWazIyodefaoEfRhgPoidkpOpgvIpwR
        8bt6ny0lk4Q1KTRA1eChhOaIcWxsWt5KtXBaYl5P2BuwTWssMbr3neFtDi964y+7
        pTVrkyD+eDmyUYLQcn1G/+aftouKCZCneaKK6jECgYAuONkMqFKluG4a6nh+HRD/
        dQc5pf2QzTlhSJ9+dcnMu5qghlrVvK1aVuENbOTUzk2A6UIqJ4kGVaixln+Tatte
        PlRfR2XkMZlkg3k/8g/iI8Bz8bzOFD/RwZn6eaMaDgCAVXcxMsxKPcZLYMobJ7rL
        emSOjx+MYAM+sKB2j9vq2w==
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
#Nexus的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NEXUS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
    annotations:
      description: Route for Nexus http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${NEXUS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${NEXUS_SERVICE}-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAIqh9C24phyUMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MDIxNzA4MjFaFw0xODA2MDMxNzA4MjFaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKqf8l0ZwWA7
        qnv7kMLFgrMXxuFsCv4KkcD4Nrx2gWOfVYDYU/oVQWtz1nriAA1ldDTy7DJGD1Rw
        sMCEwPq4p0O7mZk2kBUbtb9tOp5E9nOoY9mCFhEpqptjH7TBmPzMckW9fzPefdBU
        SM9aGlALLwtoJkTTnngPmPtVUVmZ1qqo19zlRdAldbo2dY3ELpQxgBApG1orFO7Q
        gt03xNJOos1QkLv9nAMDxbWkObBkN3SKUAb8mNW3Qm9y411wgQeffnTnultsCI5j
        D4vdnjFmgOO66UPm8KrAYYwJYK/KhZxbzDqekJGQT6PlA/q5V4bwd3jLNSCMqaKl
        S1tfM8Lu8+sCAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEATMHQ6y+z3abki9qsNrLXcbvJZR3mg7TfIVwlgWEtP7nFxnjDkB3v
        7C6gRY2p3oMvZGhuwEsQX7DC1LJQnWRZVjnJwt4jIwch2XoGsTrXq40kDRg+wHXd
        kx+iE1U113CW1X4Rdyoc841ZKZthbzDNQQUdY19znN0jN+OxAaHUUc8hjgAasFAb
        0ZRs8kztQCz55M/QtQyYEc/iC8mkCBMW5aKPVODCqp6GklRX0UTwjSJarLlC/zMB
        x8nRQDAh5WAjIdzUrnKm97T1Pd1FPWer/dScY78qJMteBz97KwItWMTYjSmLiyag
        EswyntcjwpceMIdhLOQjWSZp6a9BGmGfZQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCqn/JdGcFgO6p7
        +5DCxYKzF8bhbAr+CpHA+Da8doFjn1WA2FP6FUFrc9Z64gANZXQ08uwyRg9UcLDA
        hMD6uKdDu5mZNpAVG7W/bTqeRPZzqGPZghYRKaqbYx+0wZj8zHJFvX8z3n3QVEjP
        WhpQCy8LaCZE0554D5j7VVFZmdaqqNfc5UXQJXW6NnWNxC6UMYAQKRtaKxTu0ILd
        N8TSTqLNUJC7/ZwDA8W1pDmwZDd0ilAG/JjVt0JvcuNdcIEHn35057pbbAiOYw+L
        3Z4xZoDjuulD5vCqwGGMCWCvyoWcW8w6npCRkE+j5QP6uVeG8Hd4yzUgjKmipUtb
        XzPC7vPrAgMBAAECggEAdcd5LskTklE9it4JfFmIsgWstHi3UcuL90+fwRJwmIsp
        I4qw1UWM5haNLEALVzP8NnyljMKN3HT5nbtF1wxV8cxy568hYGDDYcONnijuksHf
        QwqoHurLKP4Qqd6ls4ORMhDv2Kcx4/f6Vp/U4AIIVHBtUj9d+XSS3pNzV015QE2y
        JvURLvm4CNiunj08xiP2KExoa9z/LTeqav6eb2353Gw/uqK5fBaLOGkMUbFnA8pH
        Saxr5nmf7N8JbEtYTm+TCL/TLKX8GhtakQxLoSFZAJ3ArYiDrg/3rFq4yohh2ftf
        vZAclI+6eHbiZ5Qj3D39Zac2VUCWVZi/PkhRb2CPoQKBgQDWykYFijdkMfObMfjQ
        sftE3YChsznI1umb49gHYkJpPKUfrWfOMXF9B/836YZ/Wq2qY/UL3McaMtzX0qp+
        UcI+zfPNI3K4U5uOVho3+waMxWQyi54isSgOGJObqAvevSUlKZd5MNliRkk6zIjP
        rjuCxI0D38HjRJK5gSJT7xv5GwKBgQDLXG3TdY4lQXn0wHdD20UbTC0er1C16wLm
        B/CKnYxRDAmNhvf5Bl+0GDRdHKN8WSpmIjgWwoxPeOMJmtn+g0ZjGlk8t4jPwDwU
        HG9j2aqQh2V4ZzWNUc0f2KYpxeXGXHzLoOvfG7KairgAZY7lFzK+E2GoCPlK9tf3
        vsuATWjtcQKBgEDqSzVba5hFnIl4FeoFEJrkkv7L6xfvFBWATAcXRFkH8iPbxbbE
        rLcMFq9wTazp2/jWUvYt2KLrYmF8EvkwfpN6rUd/gimBY08maLAolvcupTS9i6KS
        hjeUZ/AwXr4HzlUn99ax09FmyrURofuaffPssW3NT4z/aZTVGWnip0KnAoGAQGis
        7D2eYNRlIQzYeWh4cdXlsINMZ+HgUCURnYWazIyodefaoEfRhgPoidkpOpgvIpwR
        8bt6ny0lk4Q1KTRA1eChhOaIcWxsWt5KtXBaYl5P2BuwTWssMbr3neFtDi964y+7
        pTVrkyD+eDmyUYLQcn1G/+aftouKCZCneaKK6jECgYAuONkMqFKluG4a6nh+HRD/
        dQc5pf2QzTlhSJ9+dcnMu5qghlrVvK1aVuENbOTUzk2A6UIqJ4kGVaixln+Tatte
        PlRfR2XkMZlkg3k/8g/iI8Bz8bzOFD/RwZn6eaMaDgCAVXcxMsxKPcZLYMobJ7rL
        emSOjx+MYAM+sKB2j9vq2w==
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
#SonarQube的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
    annotations:
      description: Route for SonarQube http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SONARQUBE_SERVICE}"
      weigth: 100
    port:
      targetPort: "${SONARQUBE_SERVICE}-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAIqh9C24phyUMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MDIxNzA4MjFaFw0xODA2MDMxNzA4MjFaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKqf8l0ZwWA7
        qnv7kMLFgrMXxuFsCv4KkcD4Nrx2gWOfVYDYU/oVQWtz1nriAA1ldDTy7DJGD1Rw
        sMCEwPq4p0O7mZk2kBUbtb9tOp5E9nOoY9mCFhEpqptjH7TBmPzMckW9fzPefdBU
        SM9aGlALLwtoJkTTnngPmPtVUVmZ1qqo19zlRdAldbo2dY3ELpQxgBApG1orFO7Q
        gt03xNJOos1QkLv9nAMDxbWkObBkN3SKUAb8mNW3Qm9y411wgQeffnTnultsCI5j
        D4vdnjFmgOO66UPm8KrAYYwJYK/KhZxbzDqekJGQT6PlA/q5V4bwd3jLNSCMqaKl
        S1tfM8Lu8+sCAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEATMHQ6y+z3abki9qsNrLXcbvJZR3mg7TfIVwlgWEtP7nFxnjDkB3v
        7C6gRY2p3oMvZGhuwEsQX7DC1LJQnWRZVjnJwt4jIwch2XoGsTrXq40kDRg+wHXd
        kx+iE1U113CW1X4Rdyoc841ZKZthbzDNQQUdY19znN0jN+OxAaHUUc8hjgAasFAb
        0ZRs8kztQCz55M/QtQyYEc/iC8mkCBMW5aKPVODCqp6GklRX0UTwjSJarLlC/zMB
        x8nRQDAh5WAjIdzUrnKm97T1Pd1FPWer/dScY78qJMteBz97KwItWMTYjSmLiyag
        EswyntcjwpceMIdhLOQjWSZp6a9BGmGfZQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCqn/JdGcFgO6p7
        +5DCxYKzF8bhbAr+CpHA+Da8doFjn1WA2FP6FUFrc9Z64gANZXQ08uwyRg9UcLDA
        hMD6uKdDu5mZNpAVG7W/bTqeRPZzqGPZghYRKaqbYx+0wZj8zHJFvX8z3n3QVEjP
        WhpQCy8LaCZE0554D5j7VVFZmdaqqNfc5UXQJXW6NnWNxC6UMYAQKRtaKxTu0ILd
        N8TSTqLNUJC7/ZwDA8W1pDmwZDd0ilAG/JjVt0JvcuNdcIEHn35057pbbAiOYw+L
        3Z4xZoDjuulD5vCqwGGMCWCvyoWcW8w6npCRkE+j5QP6uVeG8Hd4yzUgjKmipUtb
        XzPC7vPrAgMBAAECggEAdcd5LskTklE9it4JfFmIsgWstHi3UcuL90+fwRJwmIsp
        I4qw1UWM5haNLEALVzP8NnyljMKN3HT5nbtF1wxV8cxy568hYGDDYcONnijuksHf
        QwqoHurLKP4Qqd6ls4ORMhDv2Kcx4/f6Vp/U4AIIVHBtUj9d+XSS3pNzV015QE2y
        JvURLvm4CNiunj08xiP2KExoa9z/LTeqav6eb2353Gw/uqK5fBaLOGkMUbFnA8pH
        Saxr5nmf7N8JbEtYTm+TCL/TLKX8GhtakQxLoSFZAJ3ArYiDrg/3rFq4yohh2ftf
        vZAclI+6eHbiZ5Qj3D39Zac2VUCWVZi/PkhRb2CPoQKBgQDWykYFijdkMfObMfjQ
        sftE3YChsznI1umb49gHYkJpPKUfrWfOMXF9B/836YZ/Wq2qY/UL3McaMtzX0qp+
        UcI+zfPNI3K4U5uOVho3+waMxWQyi54isSgOGJObqAvevSUlKZd5MNliRkk6zIjP
        rjuCxI0D38HjRJK5gSJT7xv5GwKBgQDLXG3TdY4lQXn0wHdD20UbTC0er1C16wLm
        B/CKnYxRDAmNhvf5Bl+0GDRdHKN8WSpmIjgWwoxPeOMJmtn+g0ZjGlk8t4jPwDwU
        HG9j2aqQh2V4ZzWNUc0f2KYpxeXGXHzLoOvfG7KairgAZY7lFzK+E2GoCPlK9tf3
        vsuATWjtcQKBgEDqSzVba5hFnIl4FeoFEJrkkv7L6xfvFBWATAcXRFkH8iPbxbbE
        rLcMFq9wTazp2/jWUvYt2KLrYmF8EvkwfpN6rUd/gimBY08maLAolvcupTS9i6KS
        hjeUZ/AwXr4HzlUn99ax09FmyrURofuaffPssW3NT4z/aZTVGWnip0KnAoGAQGis
        7D2eYNRlIQzYeWh4cdXlsINMZ+HgUCURnYWazIyodefaoEfRhgPoidkpOpgvIpwR
        8bt6ny0lk4Q1KTRA1eChhOaIcWxsWt5KtXBaYl5P2BuwTWssMbr3neFtDi964y+7
        pTVrkyD+eDmyUYLQcn1G/+aftouKCZCneaKK6jECgYAuONkMqFKluG4a6nh+HRD/
        dQc5pf2QzTlhSJ9+dcnMu5qghlrVvK1aVuENbOTUzk2A6UIqJ4kGVaixln+Tatte
        PlRfR2XkMZlkg3k/8g/iI8Bz8bzOFD/RwZn6eaMaDgCAVXcxMsxKPcZLYMobJ7rL
        emSOjx+MYAM+sKB2j9vq2w==
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SUBVERSION_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SUBVERSION_SERVICE}"
    annotations:
      description: Route for Subversion http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SUBVERSION_SERVICE}"
      weigth: 100
    port:
      targetPort: 80-tcp
    wildcardPolicy: None
#Subversion的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SUBVERSION_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SUBVERSION_SERVICE}"
    annotations:
      description: Route for Subversion http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SUBVERSION_SERVICE}"
      weigth: 100
    port:
      targetPort: 80-tcp
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAIqh9C24phyUMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MDIxNzA4MjFaFw0xODA2MDMxNzA4MjFaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwlaSE9OR0xFTEUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKqf8l0ZwWA7
        qnv7kMLFgrMXxuFsCv4KkcD4Nrx2gWOfVYDYU/oVQWtz1nriAA1ldDTy7DJGD1Rw
        sMCEwPq4p0O7mZk2kBUbtb9tOp5E9nOoY9mCFhEpqptjH7TBmPzMckW9fzPefdBU
        SM9aGlALLwtoJkTTnngPmPtVUVmZ1qqo19zlRdAldbo2dY3ELpQxgBApG1orFO7Q
        gt03xNJOos1QkLv9nAMDxbWkObBkN3SKUAb8mNW3Qm9y411wgQeffnTnultsCI5j
        D4vdnjFmgOO66UPm8KrAYYwJYK/KhZxbzDqekJGQT6PlA/q5V4bwd3jLNSCMqaKl
        S1tfM8Lu8+sCAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEATMHQ6y+z3abki9qsNrLXcbvJZR3mg7TfIVwlgWEtP7nFxnjDkB3v
        7C6gRY2p3oMvZGhuwEsQX7DC1LJQnWRZVjnJwt4jIwch2XoGsTrXq40kDRg+wHXd
        kx+iE1U113CW1X4Rdyoc841ZKZthbzDNQQUdY19znN0jN+OxAaHUUc8hjgAasFAb
        0ZRs8kztQCz55M/QtQyYEc/iC8mkCBMW5aKPVODCqp6GklRX0UTwjSJarLlC/zMB
        x8nRQDAh5WAjIdzUrnKm97T1Pd1FPWer/dScY78qJMteBz97KwItWMTYjSmLiyag
        EswyntcjwpceMIdhLOQjWSZp6a9BGmGfZQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCqn/JdGcFgO6p7
        +5DCxYKzF8bhbAr+CpHA+Da8doFjn1WA2FP6FUFrc9Z64gANZXQ08uwyRg9UcLDA
        hMD6uKdDu5mZNpAVG7W/bTqeRPZzqGPZghYRKaqbYx+0wZj8zHJFvX8z3n3QVEjP
        WhpQCy8LaCZE0554D5j7VVFZmdaqqNfc5UXQJXW6NnWNxC6UMYAQKRtaKxTu0ILd
        N8TSTqLNUJC7/ZwDA8W1pDmwZDd0ilAG/JjVt0JvcuNdcIEHn35057pbbAiOYw+L
        3Z4xZoDjuulD5vCqwGGMCWCvyoWcW8w6npCRkE+j5QP6uVeG8Hd4yzUgjKmipUtb
        XzPC7vPrAgMBAAECggEAdcd5LskTklE9it4JfFmIsgWstHi3UcuL90+fwRJwmIsp
        I4qw1UWM5haNLEALVzP8NnyljMKN3HT5nbtF1wxV8cxy568hYGDDYcONnijuksHf
        QwqoHurLKP4Qqd6ls4ORMhDv2Kcx4/f6Vp/U4AIIVHBtUj9d+XSS3pNzV015QE2y
        JvURLvm4CNiunj08xiP2KExoa9z/LTeqav6eb2353Gw/uqK5fBaLOGkMUbFnA8pH
        Saxr5nmf7N8JbEtYTm+TCL/TLKX8GhtakQxLoSFZAJ3ArYiDrg/3rFq4yohh2ftf
        vZAclI+6eHbiZ5Qj3D39Zac2VUCWVZi/PkhRb2CPoQKBgQDWykYFijdkMfObMfjQ
        sftE3YChsznI1umb49gHYkJpPKUfrWfOMXF9B/836YZ/Wq2qY/UL3McaMtzX0qp+
        UcI+zfPNI3K4U5uOVho3+waMxWQyi54isSgOGJObqAvevSUlKZd5MNliRkk6zIjP
        rjuCxI0D38HjRJK5gSJT7xv5GwKBgQDLXG3TdY4lQXn0wHdD20UbTC0er1C16wLm
        B/CKnYxRDAmNhvf5Bl+0GDRdHKN8WSpmIjgWwoxPeOMJmtn+g0ZjGlk8t4jPwDwU
        HG9j2aqQh2V4ZzWNUc0f2KYpxeXGXHzLoOvfG7KairgAZY7lFzK+E2GoCPlK9tf3
        vsuATWjtcQKBgEDqSzVba5hFnIl4FeoFEJrkkv7L6xfvFBWATAcXRFkH8iPbxbbE
        rLcMFq9wTazp2/jWUvYt2KLrYmF8EvkwfpN6rUd/gimBY08maLAolvcupTS9i6KS
        hjeUZ/AwXr4HzlUn99ax09FmyrURofuaffPssW3NT4z/aZTVGWnip0KnAoGAQGis
        7D2eYNRlIQzYeWh4cdXlsINMZ+HgUCURnYWazIyodefaoEfRhgPoidkpOpgvIpwR
        8bt6ny0lk4Q1KTRA1eChhOaIcWxsWt5KtXBaYl5P2BuwTWssMbr3neFtDi964y+7
        pTVrkyD+eDmyUYLQcn1G/+aftouKCZCneaKK6jECgYAuONkMqFKluG4a6nh+HRD/
        dQc5pf2QzTlhSJ9+dcnMu5qghlrVvK1aVuENbOTUzk2A6UIqJ4kGVaixln+Tatte
        PlRfR2XkMZlkg3k/8g/iI8Bz8bzOFD/RwZn6eaMaDgCAVXcxMsxKPcZLYMobJ7rL
        emSOjx+MYAM+sKB2j9vq2w==
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SUBVERSION_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SUBVERSION_SERVICE}"
    annotations:
      description: Route for Subversion http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SUBVERSION_SERVICE}"
      weigth: 100
    port:
      targetPort: 80-tcp
    wildcardPolicy: None
#Gogs数据库存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 5Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${POSTGRESQL_SERVICE}-storage/${NAMESPACE}/${GOGS_SERVICE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-pv"
#Gogs存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${GOGS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 40Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${GOGS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${GOGS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${GOGS_SERVICE}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 40Gi
    volumeName: "${NAMESPACE}-${GOGS_SERVICE}-pv"
#Jenkins存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${JENKINS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${JENKINS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${JENKINS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    volumeName: "${NAMESPACE}-${JENKINS_SERVICE}-pv"
#Nexus存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NEXUS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${NEXUS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 20Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${NEXUS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${NEXUS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NEXUS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NEXUS_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20Gi
    volumeName: "${NAMESPACE}-${NEXUS_SERVICE}-pv"
#Sonarqube数据库存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 5Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${POSTGRESQL_SERVICE}-storage/${NAMESPACE}/${SONARQUBE_SERVICE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-pv"
#Sonarqube存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SONARQUBE_SERVICE}-home-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SONARQUBE_SERVICE}-home"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${SONARQUBE_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SONARQUBE_SERVICE}-home"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 8Gi
    volumeName: "${NAMESPACE}-${SONARQUBE_SERVICE}-home-pv"
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SONARQUBE_SERVICE}-data-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 6Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SONARQUBE_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${SONARQUBE_SERVICE}-storage/${NAMESPACE}/data/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SONARQUBE_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 6Gi
    volumeName: "${NAMESPACE}-${SONARQUBE_SERVICE}-data-pv"
#Gogs的postgresql数据库部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Gogs Postgresql
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - "${POSTGRESQL_SERVICE}"
          from:
            kind: ImageStreamTag
            namespace: "${IMAGE_NAMESPACE}"
            name: postgresql-95-centos7:latest
          lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      spec:
        volumes:
          - name: "${POSTGRESQL_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
        containers:
          - name: "${POSTGRESQL_SERVICE}"
            image: ' '
            ports:
              - containerPort: 5432
                protocol: TCP
            env:
              - name: POSTGRESQL_USER
                value: "${GOGS_POSTGRESQL_USER}"
              - name: POSTGRESQL_PASSWORD
                value: "${GOGS_POSTGRESQL_PASSWORD}"
              - name: POSTGRESQL_DATABASE
                value: "${GOGS_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '1'
                memory: 512Mi
            volumeMounts:
              - name: "${POSTGRESQL_SERVICE}-data"
                mountPath: /var/lib/pgsql/data
            livenessProbe:
              tcpSocket:
                port: 5432
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                    $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Gogs的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Gogs
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${GOGS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: gogs:0.11.5
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${GOGS_SERVICE}"
        annotations:
          openshift.io/container.gogs.image.entrypoint: '["docker/start.sh","/bin/s6-svscan","/app/gogs/docker/s6/"]'
      spec:
        volumes:
          - name: "${GOGS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${GOGS_SERVICE}-data"
        containers:
          - name: "${GOGS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 3000
                protocol: TCP
            env:
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '1'
                memory: 512Mi
            volumeMounts:
              - name: "${GOGS_SERVICE}-data"
                mountPath: /data
            livenessProbe:
              httpGet:
                path: /
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 15
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 15
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Jenkins的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Jenkins
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${JENKINS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: jenkins-2-centos7:latest
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${JENKINS_SERVICE}"
          deploymentconfig: "${JENKINS_SERVICE}"
      spec:
        volumes:
          - name: "${JENKINS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${JENKINS_SERVICE}-data"
        containers:
          - name: "${JENKINS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 8080
                protocol: TCP
            env:
              - name: OPENSHIFT_ENABLE_OAUTH
                value: "${ENABLE_OAUTH}"
              - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
                value: 'true'
              - name: OPENSHIFT_JENKINS_JVM_ARCH
                value: "${JVM_ARCH}"
              - name: KUBERNETES_MASTER
                value: https://kubernetes.default:443
              - name: KUBERNETES_TRUST_CERTIFICATES
                value: 'true'
              - name: JNLP_SERVICE_NAME
                value: "${JENKINS_SERVICE}-jnlp"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '1'
                memory: 512Mi
            volumeMounts:
              - name: "${JENKINS_SERVICE}-data"
                mountPath: /var/lib/jenkins
            livenessProbe:
              httpGet:
                path: /login
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 420
              timeoutSeconds: 3
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 30
            readinessProbe:
              httpGet:
                path: /login
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 3
              timeoutSeconds: 3
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${JENKINS_SERVICE}"
        serviceAccount: "${JENKINS_SERVICE}"
        securityContext: {}
  status: {}
#Nexus的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${NEXUS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Nexus
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${NEXUS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: nexus:2.14.4
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${NEXUS_SERVICE}"
      deploymentconfig: "${NEXUS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${NEXUS_SERVICE}"
          deploymentconfig: "${NEXUS_SERVICE}"
      spec:
        volumes:
          - name: "${NEXUS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${NEXUS_SERVICE}-data"
        containers:
          - name: "${NEXUS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 8081
                protocol: TCP
            env:
              - name: CONTEXT_PATH
                value: /
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '1'
                memory: 512Mi
            volumeMounts:
              - name: "${NEXUS_SERVICE}-data"
                mountPath: /sonatype-work
            livenessProbe:
              httpGet:
                path: /content/groups/public/
                port: 8081
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /content/groups/public/
                port: 8081
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#SonarQube的postgresql数据库部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for SonarQube Postgresql
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - "${POSTGRESQL_SERVICE}"
          from:
            kind: ImageStreamTag
            namespace: "${IMAGE_NAMESPACE}"
            name: postgresql-95-centos7:latest
          lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${SONARQUBE_SERVICE}"
          deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
      spec:
        volumes:
          - name: "${POSTGRESQL_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}-data"
        containers:
          - name: "${POSTGRESQL_SERVICE}"
            image: ' '
            ports:
              - containerPort: 5432
                protocol: TCP
            env:
              - name: POSTGRESQL_USER
                value: "${SONARQUBE_POSTGRESQL_USER}"
              - name: POSTGRESQL_PASSWORD
                value: "${SONARQUBE_POSTGRESQL_PASSWORD}"
              - name: POSTGRESQL_DATABASE
                value: "${SONARQUBE_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '1'
                memory: 512Mi
            volumeMounts:
              - name: "${POSTGRESQL_SERVICE}-data"
                mountPath: /var/lib/pgsql/data
            livenessProbe:
              tcpSocket:
                port: 5432
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                    $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#SonarQube的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for SonarQube
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${SONARQUBE_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: sonarqube:6.3.1
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${SONARQUBE_SERVICE}"
          deploymentconfig: "${SONARQUBE_SERVICE}"
        annotations:
          openshift.io/container.sonarqube.image.entrypoint: '["./bin/run.sh"]'
      spec:
        volumes:
          - name: "${SONARQUBE_SERVICE}-home"
            persistentVolumeClaim:
              claimName: "${SONARQUBE_SERVICE}-home"
          - name: "${SONARQUBE_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${SONARQUBE_SERVICE}-data"
        containers:
          - name: "${SONARQUBE_SERVICE}"
            image: ' '
            ports:
              - containerPort: 9000
                protocol: TCP
            env:
              - name: SONARQUBE_JDBC_USERNAME
                value: "${SONARQUBE_POSTGRESQL_USER}"
              - name: SONARQUBE_JDBC_PASSWORD
                value: "${SONARQUBE_POSTGRESQL_PASSWORD}"
              - name: SONARQUBE_JDBC_URL
                value: "jdbc:postgresql://${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}/${SONARQUBE_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '2'
                memory: 2Gi
            volumeMounts:
              - name: "${SONARQUBE_SERVICE}-home"
                mountPath: /opt/sonarqube
              - name: "${SONARQUBE_SERVICE}-data"
                mountPath: /opt/sonarqube/data
            livenessProbe:
              httpGet:
                path: /
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Gogs的postgresql数据库服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs Postgresql
  spec:
    ports:
      - name: "${POSTGRESQL_SERVICE}-tcp"
        protocol: TCP
        port: 5432
        targetPort: 5432
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    clusterIP: 172.30.100.14
    type: ClusterIP
    sessionAffinity: None
#Gogs的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs
      service.alpha.openshift.io/dependencies: '[{"name": "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: "${GOGS_SERVICE}-tcp"
        protocol: TCP
        port: 3000
        targetPort: 3000
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
    clusterIP: 172.30.100.10
    type: ClusterIP
    sessionAffinity: None
#Jenkins服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins
      service.alpha.openshift.io/dependencies: '[{"name": "${JENKINS_SERVICE}-jnlp", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: "${JENKINS_SERVICE}-tcp"
        protocol: TCP
        port: 80
        targetPort: 8080
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    clusterIP: 172.30.100.11
    type: ClusterIP
    sessionAffinity: None
#Jenkins的Jnlp服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}-jnlp"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins Jnlp
  spec:
    ports:
      - name: "${JENKINS_SERVICE}-jnlp-tcp"
        protocol: TCP
        port: 50000
        targetPort: 50000
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    clusterIP: 172.30.100.12
    type: ClusterIP
    sessionAffinity: None
#Nexus的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${NEXUS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Nexus
  spec:
    ports:
      - name: "${NEXUS_SERVICE}-tcp"
        protocol: TCP
        port: 8081
        targetPort: 8081
    selector:
      app: "${NEXUS_SERVICE}"
      deploymentconfig: "${NEXUS_SERVICE}"
    clusterIP: 172.30.100.13
    type: ClusterIP
    sessionAffinity: None
#SonarQube的postgresql数据库服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for SonarQube Postgresql
  spec:
    ports:
      - name: postgresql-tcp
        protocol: TCP
        port: 5432
        targetPort: 5432
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}"
    clusterIP: 172.30.100.15
    type: ClusterIP
    sessionAffinity: None
#SonarQube的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for SonarQube
      service.alpha.openshift.io/dependencies: '[{"name": "${POSTGRESQL_SERVICE}-${SONARQUBE_SERVICE}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: "${SONARQUBE_SERVICE}-tcp"
        protocol: TCP
        port: 9000
        targetPort: 9000
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}"
    clusterIP: 172.30.100.16
    type: ClusterIP
    sessionAffinity: None
#Jboss Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: jboss-pipeline
      name: jboss-pipeline
    name: jboss-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node {
             // define value
             def branchName    = "`date +%Y%m%d%H%M%S`"
             def appName       = "jbosstask"
             def DEV_PROJECT   = "dev"
             def TEST_PROJECT  = "test"
             def STAGE_PROJECT = "stage"

             stage('Checkout') {
               checkout([$class: 'SubversionSCM',
                 additionalCredentials: [],
                 excludedCommitMessages: '',
                 excludedRegions: '',
                 excludedRevprop: '',
                 excludedUsers: 'buildbot',
                 filterChangelog: false,
                 ignoreDirPropChanges: false,
                 includedRegions: '',
                 locations: [[credentialsId: '844cbc39-0037-4e97-a1d2-b371a70cfd9c',
                     depthOption: 'infinity',
                     ignoreExternalsOption: true,
                     local: './',
                     remote: "http://svn/projects/branches/zk-finance"]],
                 workspaceUpdater: [$class: 'UpdateUpdater']])
             }

             stage("Push to gogs") {
                 echo "Push to gogs"
                 sh "echo '# zk-finance' > README.md"
                 sh "echo '.svn' > .gitignore"
                 sh "echo '.settings' >> .gitignore"
                 sh "echo '.classpath' >> .gitignore"
                 sh "echo '.project' >> .gitignore"
                 sh "echo 'target' >> .gitignore"
                 sh "rm -rf .settings .classpath .project target"
                 sh "git init"
                 sh "git config user.name 'gogs' && git config user.email 'gogs@cn.com' && git config http.sslVerify false"
                 sh "git add . && git commit -m \"${branchName}\""
                 withCredentials([[$class: 'UsernamePasswordMultiBinding',
                   credentialsId: 'dc989f32-73d7-489e-a808-c9b4c3115e0a',
                   usernameVariable: 'GIT_USERNAME',
                   passwordVariable: 'GIT_PASSWORD']]) {
                       sh("git remote add origin https://${GIT_USERNAME}:${GIT_PASSWORD}@gogs:3000/gogs/zk-finance.git")
                       sh("git push origin master:${branchName}")
                 }
                 sh "rm -rf * .git .svn .gitignore"
              }

              stage ('Build') {
                  sh "git init && git config http.sslVerify false"
                  git url: "https://gogs:3000/gogs/zk-finance.git", branch: "${branchName}", credentialsId:'dc989f32-73d7-489e-a808-c9b4c3115e0a'

                  env.JAVA_HOME = "${tool 'JDK8'}"

                  withMaven(maven: 'M3_HOME', mavenSettingsConfig: '1ba0ed09-4177-40c4-b51d-ecbd9dc624ec', mavenLocalRepo: '.repository') {
                      sh "mvn clean install -DskipTests=true"
                  }
              }

             stage ('Test and Analysis') {
               parallel (
                   'Test': {
                       sh "${mvnCmd} test"
                       step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                   },
                   'Static Analysis': {
                       sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                   }
               )
             }

             stage ('Push to Nexus') {
              sh "${mvnCmd} deploy -DskipTests=true"
             }

             stage ('Deploy DEV') {
               sh "rm -rf oc-build && mkdir -p oc-build/deployments"
               sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
               sh "oc project ${DEV_PROJECT}"
               // clean up. keep the image stream
               sh "oc delete bc,dc,svc,route -l app=tasks -n ${DEV_PROJECT}"
               // create build. override the exit code since it complains about exising imagestream
               sh "oc new-build --name=tasks --image-stream=jboss-eap70-openshift --binary=true --labels=app=tasks -n ${DEV_PROJECT} || true"
               // build image
               sh "oc start-build tasks --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
               // deploy image
               sh "oc new-app tasks:latest -n ${DEV_PROJECT}"
               sh "oc expose svc/tasks -n ${DEV_PROJECT}"
             }

             stage ('Deploy STAGE') {
               timeout(time:5, unit:'MINUTES') {
                  input message: "Promote to STAGE?", ok: "Promote"
               }

               def v = version()
               // tag for stage
               sh "oc tag ${DEV_PROJECT}/tasks:latest ${STAGE_PROJECT}/tasks:${v}"
               sh "oc project ${STAGE_PROJECT}"
               // clean up. keep the imagestream
               sh "oc delete bc,dc,svc,route -l app=tasks -n ${STAGE_PROJECT}"
               // deploy stage image
               sh "oc new-app tasks:${v} -n ${STAGE_PROJECT}"
               sh "oc expose svc/tasks -n ${STAGE_PROJECT}"
             }
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
#Nginx Pipeline
- kind: BuildConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "Nginx", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: nginx-pipeline
      name: nginx-pipeline
    name: nginx-pipeline
  spec:
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: "https://github.com/boy12371/openshift-cicd.git"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfilePath: "jenkinsfile/nginx-pipeline"
      type: JenkinsPipeline
  status:
    lastVersion: 0
