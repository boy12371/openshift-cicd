#部署cicd模板
kind: Template
apiVersion: v1
metadata:
  name: cicd-persistent
  creationTimestamp: null
  annotations:
    openshift.io/display-name: CI/CD (Persistent)
    description: |-
      All resource for cicd, with persistent storage.
    iconClass: icon-jenkins
    tags: nexus, gogs, mysql, postgresql, jenkins, sonarqube, subversion
labels:
  template: cicd-persistent-template
  group: cicd
message: Simple deploy CI/CD
#参数
parameters:
#当前项目名称
- name: NAMESPACE
  displayName: Current Project Namespace
  description: Name of the current project namespace
  value: cicd
#当前模板名称
- name: TEMPLATE
  displayName: Current Template Name
  description: Name of the current template.
  value: cicd-persistent-template
#默认服务账户名称
- name: DEFAULT_NAME
  displayName: Default ServiceAccount Name
  description: Name of the default serviceaccount.
  value: default
#Postgresql数据库容器名称
- name: POSTGRESQL_SERVICE
  displayName: PostgreSQL Service Name
  description: The name of the OpenShift Service exposed for the PostgreSQL container.
  value: postgresql
#Gogs容器名称
- name: GOGS_SERVICE
  displayName: GOGS Service Name
  description: The name of the OpenShift Service exposed for the Gogs container.
  value: gogs
#Jenkins容器名称
- name: JENKINS_SERVICE
  displayName: Jenkins Service Name
  description: The name of the OpenShift Service exposed for the Jenkins container.
  value: jenkins
#Nexus容器名称
- name: NEXUS_SERVICE
  displayName: Nexus Service Name
  description: The name of the OpenShift Service exposed for the Nexus container.
  value: nexus
#SonarQube容器名称
- name: SONARQUBE_SERVICE
  displayName: SonarQube Service Name
  description: The name of the OpenShift Service exposed for the SonarQube container.
  value: sonarqube
#Subversion容器名称
- name: SUBVERSION_SERVICE
  displayName: Subversion Service Name
  description: The name of the OpenShift Service exposed for the Subversion container.
  value: subversion
#Gogs数据库用户名
- name: GOGS_POSTGRESQL_USER
  displayName: Gogs PostgreSQL User
  description: Username for Gogs PostgreSQL backend
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
#Gogs数据库密码
- name: GOGS_POSTGRESQL_PASSWORD
  displayName: Gogs PostgreSQL Password
  description: Password for Gogs PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#Gogs数据库名
- name: GOGS_POSTGRESQL_DATABASE
  displayName: Gogs PostgreSQL Datebase Name
  description: Datebase Name for Gogs PostgreSQL backend
  from: gogs[A-Z0-9]{3}
  generate: expression
  required: true
#SonarQube数据库用户名
- name: SONARQUBE_POSTGRESQL_USER
  displayName: SonarQube PostgreSQL User
  description: Username for SonarQube PostgreSQL backend
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
#SonarQube数据库密码
- name: SONARQUBE_POSTGRESQL_PASSWORD
  displayName: SonarQube PostgreSQL Password
  description: Password for SonarQube PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#SonarQube数据库名
- name: SONARQUBE_POSTGRESQL_DATABASE
  displayName: SonarQube PostgreSQL Datebase Name
  description: Datebase Name for SonarQube PostgreSQL backend
  from: sona[A-Z0-9]{3}
  generate: expression
  required: true
- name: JENKINS_PASSWORD
  displayName: SonarQube PostgreSQL Datebase Name
  description: Datebase Name for SonarQube PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#激活openshift登录
- name: ENABLE_OAUTH
  displayName: Enable OAuth
  description: |-
    Whether to enable OAuth OpenShift integration. If false, the static
    account 'admin' will be initialized with the password 'password'.
  value: 'true'
#JVM架构
- name: JVM_ARCH
  displayName: JVM Architecture
  description: Whether container runs with a 32 bit (i386) or 64 bit (x86_64) JVM.
  value: i386
#日志信息存放路径
- name: LOG_MESSAGE
  displayName: Termination Message Path
  description: Maximum amount of memory the container can use.
  value: /dev/termination-log
#部署超时
- name: TIME_OUT
  displayName: timeout seconds
  description: Deployment params timeout seconds
  value: '600'
#镜像所在项目名称
- name: IMAGE_NAMESPACE
  displayName: Cicd ImageStream Namespace
  description: The OpenShift Namespace where the Cicd ImageStream resides.
  value: default
#CST时区
- name: SERVER_TIMEZONE
  displayName: CST Timezone
  description: China Standard Time for POD
  value: Asia/Shanghai
objects:
#创建jenkins服务账户
- apiVersion: v1
  kind: ServiceAccount
  groupNames: "${NAMESPACE}"
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE}"}}'
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
#创建default角色绑定
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    name: "${DEFAULT_NAME}_edit"
    namespace: "${NAMESPACE}"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${DEFAULT_NAME}"
    namespace: "${NAMESPACE}"
#创建jenkins角色绑定
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}_edit"
    namespace: "${NAMESPACE}"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
#Gogs的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
    annotations:
      description: Route for Gogs https service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${GOGS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${GOGS_SERVICE}-3000-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAPybyJEilI9HMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MTExNjA1MDlaFw0xODA2MTIxNjA1MDlaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQtZ8moWeHU
        H4PJjBop+xOSo+kkVFdKW4Vp3G4uk4+0lHVZR36RZnwNv04yRDegZk06qcLEpwNR
        4T1/kbuTk3/c0vGtKfJkH0o+uKUUhgPjxEHsOwkmYqTuEBrvMZTGfoNKQXxjTeYK
        wYrNqxd/WWGBHFU0eTWdgEgxAqjlpbbiwL49ssbsfL/2B80ipgOAE70oQk43igxe
        aCa34eoG0HCsJJ5FZD7EUD5xHRNqQIYfw9pJ90rtKF1O7OC5vb7UZ+ZMK8LD/E7C
        qnOTEeU4Lw7MAQxcYarXuM4GO+k4wtDW70aJrz9FXRP/z+OibX9Aqerk7PlhdOyK
        YPhdlX1Gf2ECAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEAEK8yI3O4CE/nPhsIs6b6twvZ2qrzhQ+CItGLZ4016AIQct2s/d0A
        CytKG33iIyF3erHKqz7DqpkMRca7rXhM2DZ67ZJ8u/b/5tAYz8F5W6FajNfA+wvs
        coLj+lXwbo4bjVPQzevxkgVKwnKunSZmXgzFmZ+afxWiUlI9nSQY90udenUy4hka
        P/Oa+n18nBYAo2Tnuy4EDMO2FIFdKwgsRraLpZF2pxRGF1fqT2GEoRCOiXLkWdhx
        fmqQl2v8Vcz+SjG9i2JeaVY5QxVejEkYBylEsDeeATG6azQ+XPvCp5YvXW1M669A
        HDw0qrSMEDmXLyry9krSnVtV7Bw7pB/KGQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCkLWfJqFnh1B+D
        yYwaKfsTkqPpJFRXSluFadxuLpOPtJR1WUd+kWZ8Db9OMkQ3oGZNOqnCxKcDUeE9
        f5G7k5N/3NLxrSnyZB9KPrilFIYD48RB7DsJJmKk7hAa7zGUxn6DSkF8Y03mCsGK
        zasXf1lhgRxVNHk1nYBIMQKo5aW24sC+PbLG7Hy/9gfNIqYDgBO9KEJON4oMXmgm
        t+HqBtBwrCSeRWQ+xFA+cR0TakCGH8PaSfdK7ShdTuzgub2+1GfmTCvCw/xOwqpz
        kxHlOC8OzAEMXGGq17jOBjvpOMLQ1u9Gia8/RV0T/8/jom1/QKnq5Oz5YXTsimD4
        XZV9Rn9hAgMBAAECggEAFs537HuGgOiGuDf3TmsmhcGJI4n4bWfW7uGVzXiK5xue
        w+5zEBICupjuSl6RO2j8zR2pF3VZ/gwRzgk6pWQKyWhTpV74xMND1XyBCe2f8Epj
        qQS37r12VpL7icJQkOpCCNr33d+topc765xGeC0orXLSDMQNUnVerKiiRfQg4RbF
        2jyL/daM2p39BuCMfwq+IsWDTwm6WF21uWlnNJ9HWmoghZ8he4KYCsTPlJjw5oJB
        KoXsbUbqs4CFW0UI1S7wfp1xF78PVf23h7hTl+lvaCuTHQf48FZAo/fhJFYEK7li
        Ix0BgwEt29p9Y32CFxm6dEFqZGkHoPNIhW5EBt1OQQKBgQDNa2oPgJX2G5HJAo8e
        4k0dSJivyyDMl1HEiMO99Be5zTYTcGigi1pckf0eTkHDzZQYw3dDxfWOAI/8Dnsx
        fBtnZ17jVVAozYM+tnJ35eG9ro6IehzDU9HZ0QqHnmK2YvBS4Q3v4mUfLYS43jRj
        mUV8i9RRyp2eH2iKzBkY0e7m1wKBgQDMmkuW1cnaSwEMttkrW+8a99UjQXwoBwtX
        1N4T0cI13BvG82IwR8UvIt5VVrCn7YvnBKCQyUKDkt6ip6kPzC1emKFBiHFgop/F
        kX1qTM5dFbIhfwpca0quHDzMPny6C+OFjKZb7pJh+grNStwcNxU6ebnPqJhPGNxI
        p81xuibchwKBgGgEtmY3NLi06TOiShrXeTkU48xQzcEL9unQX1421jTNx048o554
        Mj+h5UyNUBv4Y7/Oavw0p81KV57JLnS2ZaIM5C21q6udtZHyDTDNhWvpkl9lhl8a
        eK8VfYGDIHU+0HcHY2lPeOk6wXRjgJ/WoysYG2F3eizxtpxiEWtSEultAoGAPiuc
        UGcCAOzNktl0v/Idg6pO/3mEin0pezTZjlgslUUew6Ns8JK+XgZQXMoMv9o0qqwD
        RjuBlI1qTS549q3qE1Z5mXomSWDg/52n6EcSZcKT8A20TkTj2mgGKWHLcJTwO8Jz
        QngJzu+1nI/ktkYekzgtt+XY8h/xv7oNeUNBT70CgYEAzWqBdoHbJ0Lnqn03eJoI
        5qkTS9EBbROS6kCXyXwy3x9tkxXBsjWTPCduc5umhA4pA4wGiYtScQqPAw6sX6g1
        J06LwGi/F13N28mo4nZVLnFrRx0Jf0cNG0fv5IPslU8DOUcx/8KP7AaEm6GFk2XL
        SALBVm2aoKo5mj6vUm4FM+I=
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${GOGS_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
    annotations:
      description: Route for Gogs http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${GOGS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${GOGS_SERVICE}-3000-tcp"
    wildcardPolicy: None
#Jenkins的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
    annotations:
      description: Route for Jenkins https service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${JENKINS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${JENKINS_SERVICE}-8080-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAPybyJEilI9HMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MTExNjA1MDlaFw0xODA2MTIxNjA1MDlaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQtZ8moWeHU
        H4PJjBop+xOSo+kkVFdKW4Vp3G4uk4+0lHVZR36RZnwNv04yRDegZk06qcLEpwNR
        4T1/kbuTk3/c0vGtKfJkH0o+uKUUhgPjxEHsOwkmYqTuEBrvMZTGfoNKQXxjTeYK
        wYrNqxd/WWGBHFU0eTWdgEgxAqjlpbbiwL49ssbsfL/2B80ipgOAE70oQk43igxe
        aCa34eoG0HCsJJ5FZD7EUD5xHRNqQIYfw9pJ90rtKF1O7OC5vb7UZ+ZMK8LD/E7C
        qnOTEeU4Lw7MAQxcYarXuM4GO+k4wtDW70aJrz9FXRP/z+OibX9Aqerk7PlhdOyK
        YPhdlX1Gf2ECAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEAEK8yI3O4CE/nPhsIs6b6twvZ2qrzhQ+CItGLZ4016AIQct2s/d0A
        CytKG33iIyF3erHKqz7DqpkMRca7rXhM2DZ67ZJ8u/b/5tAYz8F5W6FajNfA+wvs
        coLj+lXwbo4bjVPQzevxkgVKwnKunSZmXgzFmZ+afxWiUlI9nSQY90udenUy4hka
        P/Oa+n18nBYAo2Tnuy4EDMO2FIFdKwgsRraLpZF2pxRGF1fqT2GEoRCOiXLkWdhx
        fmqQl2v8Vcz+SjG9i2JeaVY5QxVejEkYBylEsDeeATG6azQ+XPvCp5YvXW1M669A
        HDw0qrSMEDmXLyry9krSnVtV7Bw7pB/KGQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCkLWfJqFnh1B+D
        yYwaKfsTkqPpJFRXSluFadxuLpOPtJR1WUd+kWZ8Db9OMkQ3oGZNOqnCxKcDUeE9
        f5G7k5N/3NLxrSnyZB9KPrilFIYD48RB7DsJJmKk7hAa7zGUxn6DSkF8Y03mCsGK
        zasXf1lhgRxVNHk1nYBIMQKo5aW24sC+PbLG7Hy/9gfNIqYDgBO9KEJON4oMXmgm
        t+HqBtBwrCSeRWQ+xFA+cR0TakCGH8PaSfdK7ShdTuzgub2+1GfmTCvCw/xOwqpz
        kxHlOC8OzAEMXGGq17jOBjvpOMLQ1u9Gia8/RV0T/8/jom1/QKnq5Oz5YXTsimD4
        XZV9Rn9hAgMBAAECggEAFs537HuGgOiGuDf3TmsmhcGJI4n4bWfW7uGVzXiK5xue
        w+5zEBICupjuSl6RO2j8zR2pF3VZ/gwRzgk6pWQKyWhTpV74xMND1XyBCe2f8Epj
        qQS37r12VpL7icJQkOpCCNr33d+topc765xGeC0orXLSDMQNUnVerKiiRfQg4RbF
        2jyL/daM2p39BuCMfwq+IsWDTwm6WF21uWlnNJ9HWmoghZ8he4KYCsTPlJjw5oJB
        KoXsbUbqs4CFW0UI1S7wfp1xF78PVf23h7hTl+lvaCuTHQf48FZAo/fhJFYEK7li
        Ix0BgwEt29p9Y32CFxm6dEFqZGkHoPNIhW5EBt1OQQKBgQDNa2oPgJX2G5HJAo8e
        4k0dSJivyyDMl1HEiMO99Be5zTYTcGigi1pckf0eTkHDzZQYw3dDxfWOAI/8Dnsx
        fBtnZ17jVVAozYM+tnJ35eG9ro6IehzDU9HZ0QqHnmK2YvBS4Q3v4mUfLYS43jRj
        mUV8i9RRyp2eH2iKzBkY0e7m1wKBgQDMmkuW1cnaSwEMttkrW+8a99UjQXwoBwtX
        1N4T0cI13BvG82IwR8UvIt5VVrCn7YvnBKCQyUKDkt6ip6kPzC1emKFBiHFgop/F
        kX1qTM5dFbIhfwpca0quHDzMPny6C+OFjKZb7pJh+grNStwcNxU6ebnPqJhPGNxI
        p81xuibchwKBgGgEtmY3NLi06TOiShrXeTkU48xQzcEL9unQX1421jTNx048o554
        Mj+h5UyNUBv4Y7/Oavw0p81KV57JLnS2ZaIM5C21q6udtZHyDTDNhWvpkl9lhl8a
        eK8VfYGDIHU+0HcHY2lPeOk6wXRjgJ/WoysYG2F3eizxtpxiEWtSEultAoGAPiuc
        UGcCAOzNktl0v/Idg6pO/3mEin0pezTZjlgslUUew6Ns8JK+XgZQXMoMv9o0qqwD
        RjuBlI1qTS549q3qE1Z5mXomSWDg/52n6EcSZcKT8A20TkTj2mgGKWHLcJTwO8Jz
        QngJzu+1nI/ktkYekzgtt+XY8h/xv7oNeUNBT70CgYEAzWqBdoHbJ0Lnqn03eJoI
        5qkTS9EBbROS6kCXyXwy3x9tkxXBsjWTPCduc5umhA4pA4wGiYtScQqPAw6sX6g1
        J06LwGi/F13N28mo4nZVLnFrRx0Jf0cNG0fv5IPslU8DOUcx/8KP7AaEm6GFk2XL
        SALBVm2aoKo5mj6vUm4FM+I=
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${JENKINS_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
    annotations:
      description: Route for Jenkins http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${JENKINS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${JENKINS_SERVICE}-8080-tcp"
    wildcardPolicy: None
#Nexus的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NEXUS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
    annotations:
      description: Route for Nexus https service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${NEXUS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${NEXUS_SERVICE}-8081-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAPybyJEilI9HMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MTExNjA1MDlaFw0xODA2MTIxNjA1MDlaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQtZ8moWeHU
        H4PJjBop+xOSo+kkVFdKW4Vp3G4uk4+0lHVZR36RZnwNv04yRDegZk06qcLEpwNR
        4T1/kbuTk3/c0vGtKfJkH0o+uKUUhgPjxEHsOwkmYqTuEBrvMZTGfoNKQXxjTeYK
        wYrNqxd/WWGBHFU0eTWdgEgxAqjlpbbiwL49ssbsfL/2B80ipgOAE70oQk43igxe
        aCa34eoG0HCsJJ5FZD7EUD5xHRNqQIYfw9pJ90rtKF1O7OC5vb7UZ+ZMK8LD/E7C
        qnOTEeU4Lw7MAQxcYarXuM4GO+k4wtDW70aJrz9FXRP/z+OibX9Aqerk7PlhdOyK
        YPhdlX1Gf2ECAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEAEK8yI3O4CE/nPhsIs6b6twvZ2qrzhQ+CItGLZ4016AIQct2s/d0A
        CytKG33iIyF3erHKqz7DqpkMRca7rXhM2DZ67ZJ8u/b/5tAYz8F5W6FajNfA+wvs
        coLj+lXwbo4bjVPQzevxkgVKwnKunSZmXgzFmZ+afxWiUlI9nSQY90udenUy4hka
        P/Oa+n18nBYAo2Tnuy4EDMO2FIFdKwgsRraLpZF2pxRGF1fqT2GEoRCOiXLkWdhx
        fmqQl2v8Vcz+SjG9i2JeaVY5QxVejEkYBylEsDeeATG6azQ+XPvCp5YvXW1M669A
        HDw0qrSMEDmXLyry9krSnVtV7Bw7pB/KGQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCkLWfJqFnh1B+D
        yYwaKfsTkqPpJFRXSluFadxuLpOPtJR1WUd+kWZ8Db9OMkQ3oGZNOqnCxKcDUeE9
        f5G7k5N/3NLxrSnyZB9KPrilFIYD48RB7DsJJmKk7hAa7zGUxn6DSkF8Y03mCsGK
        zasXf1lhgRxVNHk1nYBIMQKo5aW24sC+PbLG7Hy/9gfNIqYDgBO9KEJON4oMXmgm
        t+HqBtBwrCSeRWQ+xFA+cR0TakCGH8PaSfdK7ShdTuzgub2+1GfmTCvCw/xOwqpz
        kxHlOC8OzAEMXGGq17jOBjvpOMLQ1u9Gia8/RV0T/8/jom1/QKnq5Oz5YXTsimD4
        XZV9Rn9hAgMBAAECggEAFs537HuGgOiGuDf3TmsmhcGJI4n4bWfW7uGVzXiK5xue
        w+5zEBICupjuSl6RO2j8zR2pF3VZ/gwRzgk6pWQKyWhTpV74xMND1XyBCe2f8Epj
        qQS37r12VpL7icJQkOpCCNr33d+topc765xGeC0orXLSDMQNUnVerKiiRfQg4RbF
        2jyL/daM2p39BuCMfwq+IsWDTwm6WF21uWlnNJ9HWmoghZ8he4KYCsTPlJjw5oJB
        KoXsbUbqs4CFW0UI1S7wfp1xF78PVf23h7hTl+lvaCuTHQf48FZAo/fhJFYEK7li
        Ix0BgwEt29p9Y32CFxm6dEFqZGkHoPNIhW5EBt1OQQKBgQDNa2oPgJX2G5HJAo8e
        4k0dSJivyyDMl1HEiMO99Be5zTYTcGigi1pckf0eTkHDzZQYw3dDxfWOAI/8Dnsx
        fBtnZ17jVVAozYM+tnJ35eG9ro6IehzDU9HZ0QqHnmK2YvBS4Q3v4mUfLYS43jRj
        mUV8i9RRyp2eH2iKzBkY0e7m1wKBgQDMmkuW1cnaSwEMttkrW+8a99UjQXwoBwtX
        1N4T0cI13BvG82IwR8UvIt5VVrCn7YvnBKCQyUKDkt6ip6kPzC1emKFBiHFgop/F
        kX1qTM5dFbIhfwpca0quHDzMPny6C+OFjKZb7pJh+grNStwcNxU6ebnPqJhPGNxI
        p81xuibchwKBgGgEtmY3NLi06TOiShrXeTkU48xQzcEL9unQX1421jTNx048o554
        Mj+h5UyNUBv4Y7/Oavw0p81KV57JLnS2ZaIM5C21q6udtZHyDTDNhWvpkl9lhl8a
        eK8VfYGDIHU+0HcHY2lPeOk6wXRjgJ/WoysYG2F3eizxtpxiEWtSEultAoGAPiuc
        UGcCAOzNktl0v/Idg6pO/3mEin0pezTZjlgslUUew6Ns8JK+XgZQXMoMv9o0qqwD
        RjuBlI1qTS549q3qE1Z5mXomSWDg/52n6EcSZcKT8A20TkTj2mgGKWHLcJTwO8Jz
        QngJzu+1nI/ktkYekzgtt+XY8h/xv7oNeUNBT70CgYEAzWqBdoHbJ0Lnqn03eJoI
        5qkTS9EBbROS6kCXyXwy3x9tkxXBsjWTPCduc5umhA4pA4wGiYtScQqPAw6sX6g1
        J06LwGi/F13N28mo4nZVLnFrRx0Jf0cNG0fv5IPslU8DOUcx/8KP7AaEm6GFk2XL
        SALBVm2aoKo5mj6vUm4FM+I=
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NEXUS_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
    annotations:
      description: Route for Nexus http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${NEXUS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${NEXUS_SERVICE}-8081-tcp"
    wildcardPolicy: None
#SonarQube的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
    annotations:
      description: Route for SonarQube https service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SONARQUBE_SERVICE}"
      weigth: 100
    port:
      targetPort: "${SONARQUBE_SERVICE}-9000-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAPybyJEilI9HMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MTExNjA1MDlaFw0xODA2MTIxNjA1MDlaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQtZ8moWeHU
        H4PJjBop+xOSo+kkVFdKW4Vp3G4uk4+0lHVZR36RZnwNv04yRDegZk06qcLEpwNR
        4T1/kbuTk3/c0vGtKfJkH0o+uKUUhgPjxEHsOwkmYqTuEBrvMZTGfoNKQXxjTeYK
        wYrNqxd/WWGBHFU0eTWdgEgxAqjlpbbiwL49ssbsfL/2B80ipgOAE70oQk43igxe
        aCa34eoG0HCsJJ5FZD7EUD5xHRNqQIYfw9pJ90rtKF1O7OC5vb7UZ+ZMK8LD/E7C
        qnOTEeU4Lw7MAQxcYarXuM4GO+k4wtDW70aJrz9FXRP/z+OibX9Aqerk7PlhdOyK
        YPhdlX1Gf2ECAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEAEK8yI3O4CE/nPhsIs6b6twvZ2qrzhQ+CItGLZ4016AIQct2s/d0A
        CytKG33iIyF3erHKqz7DqpkMRca7rXhM2DZ67ZJ8u/b/5tAYz8F5W6FajNfA+wvs
        coLj+lXwbo4bjVPQzevxkgVKwnKunSZmXgzFmZ+afxWiUlI9nSQY90udenUy4hka
        P/Oa+n18nBYAo2Tnuy4EDMO2FIFdKwgsRraLpZF2pxRGF1fqT2GEoRCOiXLkWdhx
        fmqQl2v8Vcz+SjG9i2JeaVY5QxVejEkYBylEsDeeATG6azQ+XPvCp5YvXW1M669A
        HDw0qrSMEDmXLyry9krSnVtV7Bw7pB/KGQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCkLWfJqFnh1B+D
        yYwaKfsTkqPpJFRXSluFadxuLpOPtJR1WUd+kWZ8Db9OMkQ3oGZNOqnCxKcDUeE9
        f5G7k5N/3NLxrSnyZB9KPrilFIYD48RB7DsJJmKk7hAa7zGUxn6DSkF8Y03mCsGK
        zasXf1lhgRxVNHk1nYBIMQKo5aW24sC+PbLG7Hy/9gfNIqYDgBO9KEJON4oMXmgm
        t+HqBtBwrCSeRWQ+xFA+cR0TakCGH8PaSfdK7ShdTuzgub2+1GfmTCvCw/xOwqpz
        kxHlOC8OzAEMXGGq17jOBjvpOMLQ1u9Gia8/RV0T/8/jom1/QKnq5Oz5YXTsimD4
        XZV9Rn9hAgMBAAECggEAFs537HuGgOiGuDf3TmsmhcGJI4n4bWfW7uGVzXiK5xue
        w+5zEBICupjuSl6RO2j8zR2pF3VZ/gwRzgk6pWQKyWhTpV74xMND1XyBCe2f8Epj
        qQS37r12VpL7icJQkOpCCNr33d+topc765xGeC0orXLSDMQNUnVerKiiRfQg4RbF
        2jyL/daM2p39BuCMfwq+IsWDTwm6WF21uWlnNJ9HWmoghZ8he4KYCsTPlJjw5oJB
        KoXsbUbqs4CFW0UI1S7wfp1xF78PVf23h7hTl+lvaCuTHQf48FZAo/fhJFYEK7li
        Ix0BgwEt29p9Y32CFxm6dEFqZGkHoPNIhW5EBt1OQQKBgQDNa2oPgJX2G5HJAo8e
        4k0dSJivyyDMl1HEiMO99Be5zTYTcGigi1pckf0eTkHDzZQYw3dDxfWOAI/8Dnsx
        fBtnZ17jVVAozYM+tnJ35eG9ro6IehzDU9HZ0QqHnmK2YvBS4Q3v4mUfLYS43jRj
        mUV8i9RRyp2eH2iKzBkY0e7m1wKBgQDMmkuW1cnaSwEMttkrW+8a99UjQXwoBwtX
        1N4T0cI13BvG82IwR8UvIt5VVrCn7YvnBKCQyUKDkt6ip6kPzC1emKFBiHFgop/F
        kX1qTM5dFbIhfwpca0quHDzMPny6C+OFjKZb7pJh+grNStwcNxU6ebnPqJhPGNxI
        p81xuibchwKBgGgEtmY3NLi06TOiShrXeTkU48xQzcEL9unQX1421jTNx048o554
        Mj+h5UyNUBv4Y7/Oavw0p81KV57JLnS2ZaIM5C21q6udtZHyDTDNhWvpkl9lhl8a
        eK8VfYGDIHU+0HcHY2lPeOk6wXRjgJ/WoysYG2F3eizxtpxiEWtSEultAoGAPiuc
        UGcCAOzNktl0v/Idg6pO/3mEin0pezTZjlgslUUew6Ns8JK+XgZQXMoMv9o0qqwD
        RjuBlI1qTS549q3qE1Z5mXomSWDg/52n6EcSZcKT8A20TkTj2mgGKWHLcJTwO8Jz
        QngJzu+1nI/ktkYekzgtt+XY8h/xv7oNeUNBT70CgYEAzWqBdoHbJ0Lnqn03eJoI
        5qkTS9EBbROS6kCXyXwy3x9tkxXBsjWTPCduc5umhA4pA4wGiYtScQqPAw6sX6g1
        J06LwGi/F13N28mo4nZVLnFrRx0Jf0cNG0fv5IPslU8DOUcx/8KP7AaEm6GFk2XL
        SALBVm2aoKo5mj6vUm4FM+I=
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SONARQUBE_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
    annotations:
      description: Route for Subversion http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SONARQUBE_SERVICE}"
      weigth: 100
    port:
      targetPort: "${SONARQUBE_SERVICE}-9000-tcp"
    wildcardPolicy: None
#Subversion的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SUBVERSION_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SUBVERSION_SERVICE}"
    annotations:
      description: Route for Subversion https service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SUBVERSION_SERVICE}"
      weigth: 100
    port:
      targetPort: "${SUBVERSION_SERVICE}-80-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEZTCCA02gAwIBAgIJAPybyJEilI9HMA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MTExNjA1MDlaFw0xODA2MTIxNjA1MDlaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQtZ8moWeHU
        H4PJjBop+xOSo+kkVFdKW4Vp3G4uk4+0lHVZR36RZnwNv04yRDegZk06qcLEpwNR
        4T1/kbuTk3/c0vGtKfJkH0o+uKUUhgPjxEHsOwkmYqTuEBrvMZTGfoNKQXxjTeYK
        wYrNqxd/WWGBHFU0eTWdgEgxAqjlpbbiwL49ssbsfL/2B80ipgOAE70oQk43igxe
        aCa34eoG0HCsJJ5FZD7EUD5xHRNqQIYfw9pJ90rtKF1O7OC5vb7UZ+ZMK8LD/E7C
        qnOTEeU4Lw7MAQxcYarXuM4GO+k4wtDW70aJrz9FXRP/z+OibX9Aqerk7PlhdOyK
        YPhdlX1Gf2ECAwEAAaOBpTCBojCBnwYDVR0RBIGXMIGUgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghttYXN0ZXIwLmlwYWFzLnpob25nbGVsZS5j
        b22CDyouemhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1h
        c3RlcjAuaXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0B
        AQUFAAOCAQEAEK8yI3O4CE/nPhsIs6b6twvZ2qrzhQ+CItGLZ4016AIQct2s/d0A
        CytKG33iIyF3erHKqz7DqpkMRca7rXhM2DZ67ZJ8u/b/5tAYz8F5W6FajNfA+wvs
        coLj+lXwbo4bjVPQzevxkgVKwnKunSZmXgzFmZ+afxWiUlI9nSQY90udenUy4hka
        P/Oa+n18nBYAo2Tnuy4EDMO2FIFdKwgsRraLpZF2pxRGF1fqT2GEoRCOiXLkWdhx
        fmqQl2v8Vcz+SjG9i2JeaVY5QxVejEkYBylEsDeeATG6azQ+XPvCp5YvXW1M669A
        HDw0qrSMEDmXLyry9krSnVtV7Bw7pB/KGQ==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCkLWfJqFnh1B+D
        yYwaKfsTkqPpJFRXSluFadxuLpOPtJR1WUd+kWZ8Db9OMkQ3oGZNOqnCxKcDUeE9
        f5G7k5N/3NLxrSnyZB9KPrilFIYD48RB7DsJJmKk7hAa7zGUxn6DSkF8Y03mCsGK
        zasXf1lhgRxVNHk1nYBIMQKo5aW24sC+PbLG7Hy/9gfNIqYDgBO9KEJON4oMXmgm
        t+HqBtBwrCSeRWQ+xFA+cR0TakCGH8PaSfdK7ShdTuzgub2+1GfmTCvCw/xOwqpz
        kxHlOC8OzAEMXGGq17jOBjvpOMLQ1u9Gia8/RV0T/8/jom1/QKnq5Oz5YXTsimD4
        XZV9Rn9hAgMBAAECggEAFs537HuGgOiGuDf3TmsmhcGJI4n4bWfW7uGVzXiK5xue
        w+5zEBICupjuSl6RO2j8zR2pF3VZ/gwRzgk6pWQKyWhTpV74xMND1XyBCe2f8Epj
        qQS37r12VpL7icJQkOpCCNr33d+topc765xGeC0orXLSDMQNUnVerKiiRfQg4RbF
        2jyL/daM2p39BuCMfwq+IsWDTwm6WF21uWlnNJ9HWmoghZ8he4KYCsTPlJjw5oJB
        KoXsbUbqs4CFW0UI1S7wfp1xF78PVf23h7hTl+lvaCuTHQf48FZAo/fhJFYEK7li
        Ix0BgwEt29p9Y32CFxm6dEFqZGkHoPNIhW5EBt1OQQKBgQDNa2oPgJX2G5HJAo8e
        4k0dSJivyyDMl1HEiMO99Be5zTYTcGigi1pckf0eTkHDzZQYw3dDxfWOAI/8Dnsx
        fBtnZ17jVVAozYM+tnJ35eG9ro6IehzDU9HZ0QqHnmK2YvBS4Q3v4mUfLYS43jRj
        mUV8i9RRyp2eH2iKzBkY0e7m1wKBgQDMmkuW1cnaSwEMttkrW+8a99UjQXwoBwtX
        1N4T0cI13BvG82IwR8UvIt5VVrCn7YvnBKCQyUKDkt6ip6kPzC1emKFBiHFgop/F
        kX1qTM5dFbIhfwpca0quHDzMPny6C+OFjKZb7pJh+grNStwcNxU6ebnPqJhPGNxI
        p81xuibchwKBgGgEtmY3NLi06TOiShrXeTkU48xQzcEL9unQX1421jTNx048o554
        Mj+h5UyNUBv4Y7/Oavw0p81KV57JLnS2ZaIM5C21q6udtZHyDTDNhWvpkl9lhl8a
        eK8VfYGDIHU+0HcHY2lPeOk6wXRjgJ/WoysYG2F3eizxtpxiEWtSEultAoGAPiuc
        UGcCAOzNktl0v/Idg6pO/3mEin0pezTZjlgslUUew6Ns8JK+XgZQXMoMv9o0qqwD
        RjuBlI1qTS549q3qE1Z5mXomSWDg/52n6EcSZcKT8A20TkTj2mgGKWHLcJTwO8Jz
        QngJzu+1nI/ktkYekzgtt+XY8h/xv7oNeUNBT70CgYEAzWqBdoHbJ0Lnqn03eJoI
        5qkTS9EBbROS6kCXyXwy3x9tkxXBsjWTPCduc5umhA4pA4wGiYtScQqPAw6sX6g1
        J06LwGi/F13N28mo4nZVLnFrRx0Jf0cNG0fv5IPslU8DOUcx/8KP7AaEm6GFk2XL
        SALBVm2aoKo5mj6vUm4FM+I=
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${SUBVERSION_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SUBVERSION_SERVICE}"
    annotations:
      description: Route for Subversion http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${SUBVERSION_SERVICE}"
      weigth: 100
    port:
      targetPort: "${SUBVERSION_SERVICE}-80-tcp"
    wildcardPolicy: None
#Gogs数据库存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${GOGS_SERVICE}-${POSTGRESQL_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 2Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/gogs-postgresql/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
      template: "${TEMPLATE}"
    name: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    volumeName: "${NAMESPACE}-${GOGS_SERVICE}-${POSTGRESQL_SERVICE}-pv"
#Gogs存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${GOGS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${GOGS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/gogs/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${GOGS_SERVICE}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    volumeName: "${NAMESPACE}-${GOGS_SERVICE}-pv"
#Jenkins存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${JENKINS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 15Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${JENKINS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/jenkins/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 15Gi
    volumeName: "${NAMESPACE}-${JENKINS_SERVICE}-pv"
#Nexus存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NEXUS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${NEXUS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 15Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${NEXUS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/nexus/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NEXUS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NEXUS_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 15Gi
    volumeName: "${NAMESPACE}-${NEXUS_SERVICE}-pv"
#Sonarqube数据库存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 5Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/sonarqube-postgresql/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: "${NAMESPACE}-${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}-pv"
#Sonarqube存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SONARQUBE_SERVICE}-home-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 7Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SONARQUBE_SERVICE}-home"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/sonarqube/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SONARQUBE_SERVICE}-home"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 7Gi
    volumeName: "${NAMESPACE}-${SONARQUBE_SERVICE}-home-pv"
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SONARQUBE_SERVICE}-data-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 6Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SONARQUBE_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/sonarqube/data/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SONARQUBE_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SONARQUBE_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 6Gi
    volumeName: "${NAMESPACE}-${SONARQUBE_SERVICE}-data-pv"
#Subversion存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SUBVERSION_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SUBVERSION_SERVICE}-dav-svn-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 1Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SUBVERSION_SERVICE}-dav-svn"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/subversion/dav-svn/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SUBVERSION_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SUBVERSION_SERVICE}-dav-svn"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    volumeName: "${NAMESPACE}-${SUBVERSION_SERVICE}-dav-svn-pv"
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SUBVERSION_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SUBVERSION_SERVICE}-local-svn-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 20Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SUBVERSION_SERVICE}-local-svn"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/subversion/local-svn/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SUBVERSION_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SUBVERSION_SERVICE}-local-svn"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20Gi
    volumeName: "${NAMESPACE}-${SUBVERSION_SERVICE}-local-svn-pv"
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SUBVERSION_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${SUBVERSION_SERVICE}-svn-backup-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 1Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${SUBVERSION_SERVICE}-svn-backup"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/cicd-storage/subversion/svn-backup/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${SUBVERSION_SERVICE}"
      template: "${TEMPLATE}"
    name: "${SUBVERSION_SERVICE}-svn-backup"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    volumeName: "${NAMESPACE}-${SUBVERSION_SERVICE}-svn-backup-pv"
#Gogs的postgresql数据库部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Gogs Postgresql
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - "${POSTGRESQL_SERVICE}"
          from:
            kind: ImageStreamTag
            namespace: "${IMAGE_NAMESPACE}"
            name: postgresql-95-centos7:latest
          lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
      spec:
        volumes:
          - name: "${POSTGRESQL_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}-data"
        containers:
          - name: "${POSTGRESQL_SERVICE}"
            image: ' '
            ports:
              - containerPort: 5432
                protocol: TCP
            env:
              - name: POSTGRESQL_USER
                value: "${GOGS_POSTGRESQL_USER}"
              - name: POSTGRESQL_PASSWORD
                value: "${GOGS_POSTGRESQL_PASSWORD}"
              - name: POSTGRESQL_DATABASE
                value: "${GOGS_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${POSTGRESQL_SERVICE}-data"
                mountPath: /var/lib/pgsql/data
            livenessProbe:
              tcpSocket:
                port: 5432
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                    $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Gogs的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Gogs
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${GOGS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: gogs:0.11.4
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${GOGS_SERVICE}"
        annotations:
          openshift.io/container.gogs.image.entrypoint: '["docker/start.sh","/bin/s6-svscan","/app/gogs/docker/s6/"]'
      spec:
        volumes:
          - name: "${GOGS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${GOGS_SERVICE}-data"
        containers:
          - name: "${GOGS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 3000
                protocol: TCP
            env:
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${GOGS_SERVICE}-data"
                mountPath: /data
            livenessProbe:
              httpGet:
                path: /
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 15
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 15
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Jenkins的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Jenkins
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${JENKINS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: jenkins-2-centos7:latest
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${JENKINS_SERVICE}"
          deploymentconfig: "${JENKINS_SERVICE}"
      spec:
        volumes:
          - name: "${JENKINS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${JENKINS_SERVICE}-data"
        containers:
          - name: "${JENKINS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 8080
                protocol: TCP
            env:
              - name: JENKINS_PASSWORD
                value: "${JENKINS_PASSWORD}"
              - name: OPENSHIFT_ENABLE_OAUTH
                value: "${ENABLE_OAUTH}"
              - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
                value: 'true'
              - name: OPENSHIFT_JENKINS_JVM_ARCH
                value: "${JVM_ARCH}"
              - name: KUBERNETES_MASTER
                value: https://kubernetes.default:443
              - name: KUBERNETES_TRUST_CERTIFICATES
                value: 'true'
              - name: JNLP_SERVICE_NAME
                value: "${JENKINS_SERVICE}-jnlp"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${JENKINS_SERVICE}-data"
                mountPath: /var/lib/jenkins
            livenessProbe:
              httpGet:
                path: /login
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 420
              timeoutSeconds: 3
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 30
            readinessProbe:
              httpGet:
                path: /login
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 3
              timeoutSeconds: 3
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${JENKINS_SERVICE}"
        serviceAccount: "${JENKINS_SERVICE}"
        securityContext: {}
  status: {}
#Nexus的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${NEXUS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Nexus
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${NEXUS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: nexus:2.14.4
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${NEXUS_SERVICE}"
      deploymentconfig: "${NEXUS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${NEXUS_SERVICE}"
          deploymentconfig: "${NEXUS_SERVICE}"
      spec:
        volumes:
          - name: "${NEXUS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${NEXUS_SERVICE}-data"
        containers:
          - name: "${NEXUS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 8081
                protocol: TCP
            env:
              - name: CONTEXT_PATH
                value: /
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${NEXUS_SERVICE}-data"
                mountPath: /sonatype-work
            livenessProbe:
              httpGet:
                path: /content/groups/public/
                port: 8081
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /content/groups/public/
                port: 8081
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#SonarQube的postgresql数据库部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for SonarQube Postgresql
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - "${POSTGRESQL_SERVICE}"
          from:
            kind: ImageStreamTag
            namespace: "${IMAGE_NAMESPACE}"
            name: postgresql-95-centos7:latest
          lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${SONARQUBE_SERVICE}"
          deploymentconfig: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
      spec:
        volumes:
          - name: "${POSTGRESQL_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}-data"
        containers:
          - name: "${POSTGRESQL_SERVICE}"
            image: ' '
            ports:
              - containerPort: 5432
                protocol: TCP
            env:
              - name: POSTGRESQL_USER
                value: "${SONARQUBE_POSTGRESQL_USER}"
              - name: POSTGRESQL_PASSWORD
                value: "${SONARQUBE_POSTGRESQL_PASSWORD}"
              - name: POSTGRESQL_DATABASE
                value: "${SONARQUBE_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${POSTGRESQL_SERVICE}-data"
                mountPath: /var/lib/pgsql/data
            livenessProbe:
              tcpSocket:
                port: 5432
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                    $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#SonarQube的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for SonarQube
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${SONARQUBE_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: sonarqube:6.3.1
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${SONARQUBE_SERVICE}"
          deploymentconfig: "${SONARQUBE_SERVICE}"
        annotations:
          openshift.io/container.sonarqube.image.entrypoint: '["./bin/run.sh"]'
      spec:
        volumes:
          - name: "${SONARQUBE_SERVICE}-home"
            persistentVolumeClaim:
              claimName: "${SONARQUBE_SERVICE}-home"
          - name: "${SONARQUBE_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${SONARQUBE_SERVICE}-data"
        containers:
          - name: "${SONARQUBE_SERVICE}"
            image: ' '
            ports:
              - containerPort: 9000
                protocol: TCP
            env:
              - name: SONARQUBE_JDBC_USERNAME
                value: "${SONARQUBE_POSTGRESQL_USER}"
              - name: SONARQUBE_JDBC_PASSWORD
                value: "${SONARQUBE_POSTGRESQL_PASSWORD}"
              - name: SONARQUBE_JDBC_URL
                value: "jdbc:postgresql://${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}/${SONARQUBE_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${SONARQUBE_SERVICE}-home"
                mountPath: /opt/sonarqube
              - name: "${SONARQUBE_SERVICE}-data"
                mountPath: /opt/sonarqube/data
            livenessProbe:
              httpGet:
                path: /
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Subversion的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${SUBVERSION_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SUBVERSION_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Subversion
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${SUBVERSION_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: subversion:latest
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${SUBVERSION_SERVICE}"
      deploymentconfig: "${SUBVERSION_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${SUBVERSION_SERVICE}"
          deploymentconfig: "${SUBVERSION_SERVICE}"
      spec:
        volumes:
          - name: "${SUBVERSION_SERVICE}-dav-svn"
            persistentVolumeClaim:
              claimName: "${SUBVERSION_SERVICE}-dav-svn"
          - name: "${SUBVERSION_SERVICE}-local-svn"
            persistentVolumeClaim:
              claimName: "${SUBVERSION_SERVICE}-local-svn"
          - name: "${SUBVERSION_SERVICE}-svn-backup"
            persistentVolumeClaim:
              claimName: "${SUBVERSION_SERVICE}-svn-backup"
        containers:
          - name: "${SUBVERSION_SERVICE}"
            image: ' '
            ports:
              - containerPort: 80
                protocol: TCP
              - containerPort: 443
                protocol: TCP
            env:
              - name: CONTEXT_PATH
                value: /
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${SUBVERSION_SERVICE}-dav-svn"
                mountPath: /etc/apache2/dav_svn
              - name: "${SUBVERSION_SERVICE}-local-svn"
                mountPath: /var/local/svn
              - name: "${SUBVERSION_SERVICE}-svn-backup"
                mountPath: /var/svn-backup
            livenessProbe:
              httpGet:
                path: /
                port: 80
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /
                port: 80
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Gogs的postgresql数据库服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs Postgresql
  spec:
    ports:
      - name: "${POSTGRESQL_SERVICE}-5432-tcp"
        protocol: TCP
        port: 5432
        targetPort: 5432
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}"
    clusterIP: 172.30.100.11
    type: ClusterIP
    sessionAffinity: None
#Gogs的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs
      service.alpha.openshift.io/dependencies: '[{"name": "${GOGS_SERVICE}-${POSTGRESQL_SERVICE}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: "${GOGS_SERVICE}-3000-tcp"
        protocol: TCP
        port: 3000
        targetPort: 3000
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
    clusterIP: 172.30.100.10
    type: ClusterIP
    sessionAffinity: None
#Jenkins服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins
      service.alpha.openshift.io/dependencies: '[{"name": "${JENKINS_SERVICE}-jnlp", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: "${JENKINS_SERVICE}-8080-tcp"
        protocol: TCP
        port: 8080
        targetPort: 8080
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    clusterIP: 172.30.100.12
    type: ClusterIP
    sessionAffinity: None
#Jenkins的Jnlp服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}-jnlp"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins Jnlp
  spec:
    ports:
      - name: "${JENKINS_SERVICE}-jnlp-5000-tcp"
        protocol: TCP
        port: 50000
        targetPort: 50000
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    clusterIP: 172.30.100.13
    type: ClusterIP
    sessionAffinity: None
#Nexus的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${NEXUS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NEXUS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Nexus
  spec:
    ports:
      - name: "${NEXUS_SERVICE}-8081-tcp"
        protocol: TCP
        port: 8081
        targetPort: 8081
    selector:
      app: "${NEXUS_SERVICE}"
      deploymentconfig: "${NEXUS_SERVICE}"
    clusterIP: 172.30.100.14
    type: ClusterIP
    sessionAffinity: None
#SonarQube的postgresql数据库服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for SonarQube Postgresql
  spec:
    ports:
      - name: postgresql-tcp
        protocol: TCP
        port: 5432
        targetPort: 5432
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}"
    clusterIP: 172.30.100.16
    type: ClusterIP
    sessionAffinity: None
#SonarQube的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${SONARQUBE_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SONARQUBE_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for SonarQube
      service.alpha.openshift.io/dependencies: '[{"name": "${SONARQUBE_SERVICE}-${POSTGRESQL_SERVICE}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: "${SONARQUBE_SERVICE}-9000-tcp"
        protocol: TCP
        port: 9000
        targetPort: 9000
    selector:
      app: "${SONARQUBE_SERVICE}"
      deploymentconfig: "${SONARQUBE_SERVICE}"
    clusterIP: 172.30.100.15
    type: ClusterIP
    sessionAffinity: None
#Subversion的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${SUBVERSION_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${SUBVERSION_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Subversion
  spec:
    ports:
      - name: "${SUBVERSION_SERVICE}-80-tcp"
        protocol: TCP
        port: 80
        targetPort: 80
      - name: "${SUBVERSION_SERVICE}-443-tcp"
        protocol: TCP
        port: 443
        targetPort: 443
    selector:
      app: "${SUBVERSION_SERVICE}"
      deploymentconfig: "${SUBVERSION_SERVICE}"
    clusterIP: 172.30.100.17
    type: ClusterIP
    sessionAffinity: None
#zk-finance Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: zk-finance-pipeline
      name: zk-finance-pipeline
    name: zk-finance-pipeline
  spec:
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: "https://github.com/boy12371/openshift-cicd.git"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfilePath: "jenkinsfile/zk-finance"
  status:
    lastVersion: 0
#zk-finance2 Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: zk-finance2-pipeline
      name: zk-finance2-pipeline
    name: zk-finance2-pipeline
  spec:
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: "https://github.com/boy12371/openshift-cicd.git"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfilePath: "jenkinsfile/zk-finance2"
  status:
    lastVersion: 0
#Nginx Pipeline
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: yuantianfu-pipeline
      name: yuantianfu-pipeline
    name: yuantianfu-pipeline
  spec:
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: "https://github.com/boy12371/openshift-cicd.git"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfilePath: "jenkinsfile/yuantianfu"
  status:
    lastVersion: 0
