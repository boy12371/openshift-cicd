#部署gogs模板
kind: Template
apiVersion: v1
metadata:
  name: gogs-persistent
  creationTimestamp: null
  annotations:
    openshift.io/display-name: Gogs App (Persistent)
    description: |-
      All resource for postgresql and gogs, with persistent storage.
    iconClass: icon-jenkins
    tags: postgresql, gogs
labels:
  template: cicd-gogs-persistent-template
  group: cicd
message: Simple deploy Gogs App
#参数
parameters:
#当前项目名称
- name: NAMESPACE
  displayName: Current Project Namespace
  description: Name of the current project namespace.
  value: cicd
#当前模板名称
- name: TEMPLATE
  displayName: Current Template Name
  description: Name of the current template name.
  value: cicd-gogs-persistent-template
#Postgresql数据库容器名称
- name: POSTGRESQL_SERVICE
  displayName: PostgreSQL Service Name
  description: The name of the OpenShift Service exposed for the PostgreSQL container.
  value: postgresql
#Gogs容器名称
- name: GOGS_SERVICE
  displayName: Gogs Service Name
  description: The name of the OpenShift Service exposed for the Gogs container.
  value: gogs
#Gogs数据库用户名
- name: GOGS_POSTGRESQL_USER
  displayName: Gogs PostgreSQL User Name
  description: Username for Gogs PostgreSQL backend
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
#Gogs数据库密码
- name: GOGS_POSTGRESQL_PASSWORD
  displayName: Gogs PostgreSQL Password
  description: Password for Gogs PostgreSQL backend
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
#Gogs数据库名
- name: GOGS_POSTGRESQL_DATABASE
  displayName: Gogs PostgreSQL Datebase Name
  description: Datebase Name for Gogs PostgreSQL backend
  from: sona[A-Z0-9]{3}
  generate: expression
  required: true
#日志信息存放路径
- name: LOG_MESSAGE
  displayName: Termination Message Path
  description: Maximum amount of memory the container can use.
  value: /dev/termination-log
#部署超时
- name: TIME_OUT
  displayName: timeout seconds
  description: Deployment params timeout seconds
  value: '600'
#镜像所在项目名称
- name: IMAGE_NAMESPACE
  displayName: Cicd ImageStream Namespace
  description: The OpenShift Namespace where the Cicd ImageStream resides.
  value: openshift
#CST时区
- name: SERVER_TIMEZONE
  displayName: CST Timezone
  description: China Standard Time for POD
  value: Asia/Shanghai
objects:
#创建服务账户
- apiVersion: v1
  kind: ServiceAccount
  groupNames: "${NAMESPACE}"
  metadata:
    name: superuser
#创建角色绑定
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    name: superuser_edit
    namespace: "${NAMESPACE}"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: superuser
    namespace: "${NAMESPACE}"
  userNames:
  - system:serviceaccount:cicd:superuser
#Gogs的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
    annotations:
      description: Route for Gogs http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${GOGS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${GOGS_SERVICE}-tcp"
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
#Gogs数据库存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 2Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${POSTGRESQL_SERVICE}-storage/${NAMESPACE}/${GOGS_SERVICE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
    volumeName: "${NAMESPACE}-${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-pv"
#Gogs存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${GOGS_SERVICE}-home-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 8Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${GOGS_SERVICE}-home"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${GOGS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${GOGS_SERVICE}-home"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 8Gi
    volumeName: "${NAMESPACE}-${GOGS_SERVICE}-home-pv"
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${GOGS_SERVICE}-data-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 6Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${GOGS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${GOGS_SERVICE}-storage/${NAMESPACE}/data/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${GOGS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${GOGS_SERVICE}-data"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 6Gi
    volumeName: "${NAMESPACE}-${GOGS_SERVICE}-data-pv"
#Gogs的postgresql数据库部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Gogs Postgresql
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - "${POSTGRESQL_SERVICE}"
          from:
            kind: ImageStreamTag
            namespace: "${IMAGE_NAMESPACE}"
            name: postgresql-95-centos7:latest
          lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
      spec:
        volumes:
          - name: "${POSTGRESQL_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}-data"
        containers:
          - name: "${POSTGRESQL_SERVICE}"
            image: ' '
            ports:
              - containerPort: 5432
                protocol: TCP
            env:
              - name: POSTGRESQL_USER
                value: "${GOGS_JDBC_USERNAME}"
              - name: POSTGRESQL_PASSWORD
                value: "${GOGS_POSTGRESQL_PASSWORD}"
              - name: POSTGRESQL_DATABASE
                value: "${GOGS_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '1'
                memory: 512Mi
            volumeMounts:
              - name: "${POSTGRESQL_SERVICE}-data"
                mountPath: /var/lib/pgsql/data
            livenessProbe:
              tcpSocket:
                port: 5432
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                    $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: superuser
        serviceAccount: superuser
        securityContext: {}
  status: {}
#Gogs的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Gogs
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${GOGS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: gogs:0.11.4
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${GOGS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${GOGS_SERVICE}"
          deploymentconfig: "${GOGS_SERVICE}"
        annotations:
          openshift.io/container.sonarqube.image.entrypoint: '["./bin/run.sh"]'
      spec:
        volumes:
          - name: "${GOGS_SERVICE}-home"
            persistentVolumeClaim:
              claimName: "${GOGS_SERVICE}-home"
          - name: "${GOGS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${GOGS_SERVICE}-data"
        containers:
          - name: "${GOGS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 9000
                protocol: TCP
            env:
              - name: GOGS_JDBC_USERNAME
                value: "${GOGS_JDBC_USERNAME}"
              - name: GOGS_JDBC_PASSWORD
                value: "${GOGS_POSTGRESQL_PASSWORD}"
              - name: GOGS_JDBC_URL
                value: "jdbc:postgresql://${POSTGRESQL_SERVICE}-${GOGS_SERVICE}/${GOGS_POSTGRESQL_DATABASE}"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '2'
                memory: 2Gi
            volumeMounts:
              - name: "${GOGS_SERVICE}-home"
                mountPath: /opt/sonarqube
              - name: "${GOGS_SERVICE}-data"
                mountPath: /opt/sonarqube/data
            livenessProbe:
              httpGet:
                path: /
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: superuser
        serviceAccount: superuser
        securityContext: {}
  status: {}
#Gogs的postgresql数据库服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs Postgresql
  spec:
    ports:
      - name: postgresql-tcp
        protocol: TCP
        port: 5432
        targetPort: 5432
    selector:
      app: "${GOGS_SERVICE}"
      deploymentconfig: "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}"
    clusterIP: 172.30.10.13
    type: ClusterIP
    sessionAffinity: None
#Gogs的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${GOGS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${GOGS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Gogs
      service.alpha.openshift.io/dependencies: '[{"name": "${POSTGRESQL_SERVICE}-${GOGS_SERVICE}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: gogs-tcp
        protocol: TCP
        port: 9000
        targetPort: 9000
    selector:
      deploymentconfig: "${GOGS_SERVICE}"
    clusterIP: 172.30.10.14
    type: ClusterIP
    sessionAffinity: None
