#部署nginx模板
kind: Template
apiVersion: v1
metadata:
  name: nginx-persistent
  creationTimestamp: null
  annotations:
    openshift.io/display-name: Nginx App (Persistent)
    description: |-
      All resource for nginx, with persistent storage.
    iconClass: icon-jenkins
    tags: nginx
labels:
  template: product-nginx-persistent-template
  group: product
message: Simple deploy Nginx App
#参数
parameters:
#当前项目名称
- name: NAMESPACE
  displayName: Current Project Namespace
  description: Name of the current project namespace.
  value: product
#当前模板名称
- name: TEMPLATE
  displayName: Current Template Name
  description: Name of the current template name.
  value: product-nginx-persistent-template
#默认服务账户名称
- name: DEFAULT_NAME
  displayName: Default ServiceAccount Name
  description: Name of the default serviceaccount.
  value: default
#Nginx容器名称
- name: NGINX_SERVICE
  displayName: Nginx Service Name
  description: The name of the OpenShift Service exposed for the Nginx container.
  value: nginx
#日志信息存放路径
- name: LOG_MESSAGE
  displayName: Termination Message Path
  description: Maximum amount of memory the container can use.
  value: /dev/termination-log
#部署超时
- name: TIME_OUT
  displayName: timeout seconds
  description: Deployment params timeout seconds
  value: '600'
#镜像所在项目名称
- name: IMAGE_NAMESPACE
  displayName: The ImageStream Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: openshift
#CST时区
- name: SERVER_TIMEZONE
  displayName: CST Timezone
  description: China Standard Time for POD
  value: Asia/Shanghai
objects:
#Nginx的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NGINX_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
    annotations:
      description: Route for Nginx https service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${NGINX_SERVICE}"
      weigth: 100
    port:
      targetPort: "${NGINX_SERVICE}-80-tcp"
    tls:
      termination: edge
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEXzCCA0egAwIBAgIJALSov6ZtDG65MA0GCSqGSIb3DQEBBQUAMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTAeFw0xNzA2MjQwODQzNTlaFw0xODA2MjUwODQzNTlaMIGdMQswCQYD
        VQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMRIw
        EAYDVQQKEwl6aG9uZ2xlbGUxFjAUBgNVBAsTDVpIT05HTEVMRS5DT00xJDAiBgkq
        hkiG9w0BCQEWFXN1cHBvcnRAemhvbmdsZWxlLmNvbTEWMBQGA1UEAxMNemhvbmds
        ZWxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALcjqQ5RbVy2
        uvsDuYQS2cV0nq4R7iWpVHgb67h52AFxzlyfvRasSP0W+IbhTCVLUVb0KvsQa4Cj
        i+PadP63u5R5h3NLUPBX9ip4Jj8kXCuLVI1PmddYPbwUpBiYSxF5e7piigsTcfhs
        yauIkaYx5bxdKLbQNHtj8jTNCyKma8ETPcw/3cISJ6Nyedh9j3e6JaQbTdn0O4w3
        wsS65ZA6d+PYKdpGe/Zf1GT05TPc6Jj0baQ+Myp9f0E3eMdTTD+hvxlVvyjqVf0j
        wNvNGN5YwQI8bv/UNMjAbx1g3A82IfR3adh8GTbxRF6rg/mxFQer4mgcnx+MBWLo
        ETILo3tSebMCAwEAAaOBnzCBnDCBmQYDVR0RBIGRMIGOgg16aG9uZ2xlbGUuY29t
        ghNpcGFhcy56aG9uZ2xlbGUuY29tghVtYXN0ZXIwLnpob25nbGVsZS5jb22CDyou
        emhvbmdsZWxlLmNvbYIVKi5pcGFhcy56aG9uZ2xlbGUuY29tgh0qLm1hc3RlcjAu
        aXBhYXMuemhvbmdsZWxlLmNvbYcE0jMau4cEfwAAATANBgkqhkiG9w0BAQUFAAOC
        AQEAnkfyFTmwK1hpB+LkdlVhLLCslTeJ++69cfrTKP0wDc+0VgZj8rsWl07iDbd0
        uxRerxteoMsOKS4vzbw0YqXPxGp54d0waSXyjvfBlm9ghyMn7gvPOEqlo8uoyWOD
        ljGXbJYy/7C7tX94s9tgj2QImw1a52em4Gn0oSqxSHCidqIUxMb+ydSB0c+D8ZtS
        IaTEbD/ZQJ+k63ReLexXMICV9XwXqX2QesO6ER8+EyATLh2VVr+E/QhrPiVs+gim
        5No55t9v20/N6rZUHMfFSGvEEHW6ouQOs2BLejHVtthFdub/z5U5dgSX6j3bUjFr
        lCaI6GJQZuHWj6T70mu+aBPnXg==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC3I6kOUW1ctrr7
        A7mEEtnFdJ6uEe4lqVR4G+u4edgBcc5cn70WrEj9FviG4UwlS1FW9Cr7EGuAo4vj
        2nT+t7uUeYdzS1DwV/YqeCY/JFwri1SNT5nXWD28FKQYmEsReXu6YooLE3H4bMmr
        iJGmMeW8XSi20DR7Y/I0zQsipmvBEz3MP93CEiejcnnYfY93uiWkG03Z9DuMN8LE
        uuWQOnfj2CnaRnv2X9Rk9OUz3OiY9G2kPjMqfX9BN3jHU0w/ob8ZVb8o6lX9I8Db
        zRjeWMECPG7/1DTIwG8dYNwPNiH0d2nYfBk28UReq4P5sRUHq+JoHJ8fjAVi6BEy
        C6N7UnmzAgMBAAECggEBAKQLfVMl/SAfTj2qiHKVsBv+6mRiC0AQ/WjZGbyU57fj
        iUXOkEHO8VJDUTsAdISzgpiw/g8GFkWUOapP9Jx1V8EXWw0bWdTv9cD0/s1wdF9M
        3t/1fYg3spTWqGafhB6TAxFhUuW49U3hpIPSQSTtbSvdBqs6tMgSLtK9GExhZgP7
        BFud8onbaXEMTAT5Rq4ncdNuho4CFE/PbpDyrDoSkTeyNEgo9ghTrv1l7U6fRpFr
        +9Ws+xYDUYwBHXBvsMuw5uFrKZHo4Vs4D9/NLW+4ij0yJljtAMbkiBdnPQSutN1a
        TPohy4VQcUxWHEU2KR6NfwNUy7bI0jaRc9xQTLu31oECgYEA2+rDMHZrFf6UPgHv
        cXwYZW6sYwHuyPiI6+sACtNjxVRDijrMPX63olCXeF9NOWsJMSJZR/OJdzje03W8
        6J9HnIfZ9fY2xABOgVwxP99jGflI2olJOGvtnZQscGOXxPmVn/KscWHe9Jt8DWd+
        ELmcKRcqktrkNgU3pTrO02Xi4b0CgYEA1TAcrR83NQjmD6pvXadsTd8w/AX27Kw6
        HWPgZ7HjsirP8uM9aL6k9EFY+5FQclVmVEsDefVxT+cNdU69P28VmyCUpbIq3oL3
        h0LrH2lEzWKyQZfhUsuZ4zTZ55s9i5sn76BAhmEx4+f+X+o+Qfbil0NSsFNbpciR
        DD7yZP+TqC8CgYEAsCIJbKIbSEVaY4NXS/QQ8gQ+6xkcLzfnKdRQd1sw+FVxtp86
        /zGjT8vuVMk3Z3pTpVeWXCsweR1CUehlgYY4a6Teq8Ejwb1hIvg8taRrkdz3PZhg
        3WCLsf5/zQ/m+SrQbIeHF1REpnJ1W6L889ZEvSBBx9aqmp15IMvF5Mgge50CgYEA
        la1y5MW+4BiAVk1mZU3QB5iFbtzNMfv1zX67JnLKF+RhHfoXunvnmqpqzC2JWszE
        zLfiF/WQefYSB+OhkXDvrXuhgfhmitVO7wO3ytUA/mamGtGE3LmgMNqBh1ACVQs5
        bc+InhCNk6LlgPgYf/3TtzoIS04rUWlRFVT4oJqkU/cCgYAYiNKpviwijrtG1MIc
        vdgNRmWCtt3xv4xhHCVP+YdxGHUw7cv9aTKOO/YMDbG7t4JpQWyeiNUrqXv/KeBD
        lzzsniSTE26BEiGGvYLr24InLtbRBPQN1efP+EuZBQ98bdLRrQ/VNsRDdBkWU17F
        smNvERvfJoBRq0JkyEZS/sEUvw==
        -----END PRIVATE KEY-----
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NGINX_SERVICE}-http"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
    annotations:
      description: Route for Nginx http service.
      openshift.io/host.generated: 'true'
  spec:
    host: nginx-product.zhonglele.com
    to:
      kind: Service
      name: "${NGINX_SERVICE}"
      weigth: 100
    port:
      targetPort: "${NGINX_SERVICE}-80-tcp"
    wildcardPolicy: None
#Nginx存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NGINX_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${NGINX_SERVICE}-conf-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 100Mi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${NGINX_SERVICE}-conf"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/product-storage/nginx/conf"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NGINX_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NGINX_SERVICE}-conf"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
    volumeName: "${NAMESPACE}-${NGINX_SERVICE}-conf-pv"
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NGINX_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${NGINX_SERVICE}-html-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${NGINX_SERVICE}-html"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/mnt/data/product-storage/nginx/html"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${NGINX_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NGINX_SERVICE}-html"
    namespace: "${NAMESPACE}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    volumeName: "${NAMESPACE}-${NGINX_SERVICE}-html-pv"
#Nginx的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${NGINX_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Nginx
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - "${NGINX_SERVICE}"
          from:
            kind: ImageStreamTag
            namespace: "${IMAGE_NAMESPACE}"
            name: nginx:1.13
          lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${NGINX_SERVICE}"
      deploymentconfig: "${NGINX_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${NGINX_SERVICE}"
          deploymentconfig: "${NGINX_SERVICE}"
      spec:
        volumes:
          - name: "${NGINX_SERVICE}-conf"
            persistentVolumeClaim:
              claimName: "${NGINX_SERVICE}-conf"
          - name: "${NGINX_SERVICE}-html"
            persistentVolumeClaim:
              claimName: "${NGINX_SERVICE}-html"
        containers:
          - name: "${NGINX_SERVICE}"
            image: ' '
            ports:
              - containerPort: 80
                protocol: TCP
            env:
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources: {}
            volumeMounts:
              - name: "${NGINX_SERVICE}-conf"
                mountPath: /etc/nginx
              - name: "${NGINX_SERVICE}-html"
                mountPath: /usr/share/nginx/html
            livenessProbe:
              httpGet:
                path: /
                port: 80
                scheme: HTTP
              initialDelaySeconds: 30
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /
                port: 80
                scheme: HTTP
              initialDelaySeconds: 30
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 5
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: Always
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: "${DEFAULT_NAME}"
        serviceAccount: "${DEFAULT_NAME}"
        securityContext: {}
  status: {}
#Nginx的服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${NGINX_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${NGINX_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Nginx
  spec:
    ports:
      - name: "${NGINX_SERVICE}-80-tcp"
        protocol: TCP
        port: 80
        targetPort: 80
    selector:
      app: "${NGINX_SERVICE}"
      deploymentconfig: "${NGINX_SERVICE}"
    clusterIP: 172.30.103.12
    type: ClusterIP
    sessionAffinity: None
