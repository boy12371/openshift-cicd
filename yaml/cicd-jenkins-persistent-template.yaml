#部署jenkins模板
kind: Template
apiVersion: v1
metadata:
  name: jenkins-persistent
  creationTimestamp: null
  annotations:
    openshift.io/display-name: Jenkins App (Persistent)
    description: |-
      All resource for jenkins with persistent storage.
    iconClass: icon-jenkins
    tags: jenkins
labels:
  template: cicd-jenkins-persistent-template
  group: cicd
message: Simple deploy Jenkins App
#参数
parameters:
#当前项目名称
- name: NAMESPACE
  displayName: Current Project Namespace
  description: Name of the current project namespace.
  value: cicd
#当前模板名称
- name: TEMPLATE
  displayName: Current Template Name
  description: Name of the current template name.
  value: cicd-jenkins-persistent-template
#Jenkins容器名称
- name: JENKINS_SERVICE
  displayName: Jenkins Service Name
  description: The name of the OpenShift Service exposed for the Jenkins container.
  value: jenkins
#激活openshift登录
- name: ENABLE_OAUTH
  displayName: Enable OAuth
  description: |-
    Whether to enable OAuth OpenShift integration. If false, the static
    account 'admin' will be initialized with the password 'password'.
  value: 'true'
#JVM架构
- name: JVM_ARCH
  displayName: JVM Architecture
  description: Whether container runs with a 32 bit (i386) or 64 bit (x86_64) JVM.
  value: 'i386'
#日志信息存放路径
- name: LOG_MESSAGE
  displayName: Termination Message Path
  description: Maximum amount of memory the container can use.
  value: /dev/termination-log
#部署超时
- name: TIME_OUT
  displayName: timeout seconds
  description: Deployment params timeout seconds
  value: '600'
#镜像所在项目名称
- name: IMAGE_NAMESPACE
  displayName: Cicd ImageStream Namespace
  description: The OpenShift Namespace where the Cicd ImageStream resides.
  value: openshift
#CST时区
- name: SERVER_TIMEZONE
  displayName: CST Timezone
  description: China Standard Time for POD
  value: Asia/Shanghai
objects:
#创建服务账户
- apiVersion: v1
  kind: ServiceAccount
  groupNames: "${NAMESPACE}"
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE}"}}'
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}"
    namespace: cicd
#创建角色绑定
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}_edit"
    namespace: "${NAMESPACE}"
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
  userNames:
  - system:serviceaccount:cicd:jenkins
#Jenkins的路由
- apiVersion: v1
  kind: Route
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
    annotations:
      description: Route for Jenkins http service.
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: "${JENKINS_SERVICE}"
      weigth: 100
    port:
      targetPort: "${JENKINS_SERVICE}-tcp"
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
#Jenkins存储
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${NAMESPACE}-${JENKINS_SERVICE}-pv"
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 10Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: "${JENKINS_SERVICE}-data"
      namespace: "${NAMESPACE}"
    hostPath:
      path: "/var/lib/docker/data/${JENKINS_SERVICE}-storage/${NAMESPACE}/"
    persistentVolumeReclaimPolicy: Recycle
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      group: "${NAMESPACE}"
      project: "${NAMESPACE}"
      provider: "${JENKINS_SERVICE}"
      template: "${TEMPLATE}"
    name: "${JENKINS_SERVICE}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    volumeName: "${NAMESPACE}-${JENKINS_SERVICE}-pv"
#Jenkins的部署配置
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: The DeploymentConfig for Jenkins
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: "${TIME_OUT}"
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - "${JENKINS_SERVICE}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: jenkins:latest
        lastTriggeredImage: ''
    replicas: 1
    test: false
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "${JENKINS_SERVICE}"
          deploymentconfig: "${JENKINS_SERVICE}"
      spec:
        volumes:
          - name: "${JENKINS_SERVICE}-data"
            persistentVolumeClaim:
              claimName: "${JENKINS_SERVICE}-data"
        containers:
          - name: "${JENKINS_SERVICE}"
            image: ' '
            ports:
              - containerPort: 8080
                protocol: TCP
            env:
              - name: OPENSHIFT_ENABLE_OAUTH
                value: "${ENABLE_OAUTH}"
              - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
                value: 'true'
              - name: OPENSHIFT_JENKINS_JVM_ARCH
                value: "${JVM_ARCH}"
              - name: KUBERNETES_MASTER
                value: https://kubernetes.default:443
              - name: KUBERNETES_TRUST_CERTIFICATES
                value: 'true'
              - name: JNLP_SERVICE_NAME
                value: "${JENKINS_SERVICE}-jnlp"
              - name: TZ
                value: "${SERVER_TIMEZONE}"
            resources:
              limits:
                cpu: '1'
                memory: 512Mi
            volumeMounts:
              - name: "${JENKINS_SERVICE}-data"
                mountPath: /var/lib/jenkins
            livenessProbe:
              httpGet:
                path: /login
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 420
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 30
            readinessProbe:
              httpGet:
                path: /login
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 30
            terminationMessagePath: "${LOG_MESSAGE}"
            imagePullPolicy: IfNotPresent
            securityContext:
              capabilities: {}
              privileged: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: superuser
        serviceAccount: superuser
        securityContext: {}
  status: {}
#Jenkins服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins Postgresql
      service.alpha.openshift.io/dependencies: '[{"name": "${JENKINS_SERVICE}-jnlp", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: 'true'
  spec:
    ports:
      - name: "${JENKINS_SERVICE}-tcp"
        protocol: TCP
        port: 80
        targetPort: 8080
    selector:
      app: "${JENKINS_SERVICE}"
      deploymentconfig: "${JENKINS_SERVICE}"
    clusterIP: 172.30.100.15
    type: ClusterIP
    sessionAffinity: None
#Jenkins的Jnlp服务
- apiVersion: v1
  kind: Service
  metadata:
    name: "${JENKINS_SERVICE}-jnlp"
    namespace: "${NAMESPACE}"
    creationTimestamp: null
    labels:
      app: "${JENKINS_SERVICE}"
      group: "${NAMESPACE}"
      template: "${TEMPLATE}"
    annotations:
      description: the Service for Jenkins Jnlp
  spec:
    ports:
      - name: "${JENKINS_SERVICE}-jnlp-tcp"
        protocol: TCP
        port: 50000
        targetPort: 50000
    selector:
      deploymentconfig: "${JENKINS_SERVICE}"
    clusterIP: 172.30.100.16
    type: ClusterIP
    sessionAffinity: None
#Jboss Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: jboss-pipeline
      name: jboss-pipeline
    name: jboss-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node {
             // define commands
             def mvnCmd = "mvn -s configuration/cicd-settings.xml"
             def branchName = "date +%Y%m%d%H%M%S"

             stage ('Push to gogs') {
               echo "Push to gogs"
               sh "git svn clone http://svn/projects/branches/zk-finance"
               sh "cd zk-finance && echo '# zk-finance' > README.md"
               sh "echo '.settings' > .gitignore"
               sh "echo '.classpath' >> .gitignore"
               sh "echo '.project' >> .gitignore"
               sh "git add . && git commit -m \"${branchName}\""
               sh "git remote add origin http://gogs:3000/gogs/zk-finance.git"
               sh "git push origin master:${branchName}"
               sh "cd .. && rm -rf zk-finance"
             }

             stage ('Build') {
               git branch: '${branchName}', url: 'http://gogs:3000/gogs/zk-finance.git'
               sh "${mvnCmd} clean install -DskipTests=true"
             }

             stage ('Test and Analysis') {
               parallel (
                   'Test': {
                       sh "${mvnCmd} test"
                       step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                   },
                   'Static Analysis': {
                       sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                   }
               )
             }

             stage ('Push to Nexus') {
              sh "${mvnCmd} deploy -DskipTests=true"
             }

             stage ('Deploy DEV') {
               sh "rm -rf oc-build && mkdir -p oc-build/deployments"
               sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
               sh "oc project ${DEV_PROJECT}"
               // clean up. keep the image stream
               sh "oc delete bc,dc,svc,route -l app=tasks -n ${DEV_PROJECT}"
               // create build. override the exit code since it complains about exising imagestream
               sh "oc new-build --name=tasks --image-stream=jboss-eap70-openshift --binary=true --labels=app=tasks -n ${DEV_PROJECT} || true"
               // build image
               sh "oc start-build tasks --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
               // deploy image
               sh "oc new-app tasks:latest -n ${DEV_PROJECT}"
               sh "oc expose svc/tasks -n ${DEV_PROJECT}"
             }

             stage ('Deploy STAGE') {
               timeout(time:5, unit:'MINUTES') {
                  input message: "Promote to STAGE?", ok: "Promote"
               }

               def v = version()
               // tag for stage
               sh "oc tag ${DEV_PROJECT}/tasks:latest ${STAGE_PROJECT}/tasks:${v}"
               sh "oc project ${STAGE_PROJECT}"
               // clean up. keep the imagestream
               sh "oc delete bc,dc,svc,route -l app=tasks -n ${STAGE_PROJECT}"
               // deploy stage image
               sh "oc new-app tasks:${v} -n ${STAGE_PROJECT}"
               sh "oc expose svc/tasks -n ${STAGE_PROJECT}"
             }
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
#Nginx Pipeline
- kind: BuildConfig
  apiVersion: v1
  metadata:
    creationTimestamp: null
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "Nginx", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: nginx-pipeline
      name: nginx-pipeline
    name: nginx-pipeline
  spec:
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: "https://github.com/boy12371/openshift-cicd.git"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfilePath: "jenkinsfile/nginx-pipeline"
      type: JenkinsPipeline
  status:
    lastVersion: 0
