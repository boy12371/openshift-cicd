node {
    // `date +%Y%m%d%H%M%S`
    def branchName    = System.currentTimeMillis()
    def appName       = "yuantianfu"
    def DEV_PROJECT   = "dev"
    def TEST_PROJECT  = "test"
    def STAGE_PROJECT = "stage"

    stage('Checkout svn') {
      checkout([$class: 'SubversionSCM',
        additionalCredentials: [],
        excludedCommitMessages: '',
        excludedRegions: '',
        excludedRevprop: '',
        excludedUsers: 'buildbot',
        filterChangelog: false,
        ignoreDirPropChanges: false,
        includedRegions: '',
        locations: [[credentialsId: '7aabdedc-7701-4d9d-9a9d-d58a52d1c566',
            depthOption: 'infinity',
            ignoreExternalsOption: true,
            local: './',
            remote: "http://svn.ipaas.zhonglele.com/projects/branches/${appName}"]],
        workspaceUpdater: [$class: 'UpdateUpdater']])
    }

    stage("Push to gogs") {
        echo "Push to gogs"
        sh "echo '# ${appName}' > README.md"
        sh "echo -e '.settings\n.classpath\n.project' > .gitignore"
        sh "rm -rf .settings .classpath .project"
        sh "git init"
        sh "git config user.name 'gogs' && git config user.email 'gogs@cn.com' && git config http.sslVerify false"
        sh "git add . && git commit -m \"${branchName}\""
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
            credentialsId: '1345ea63-7f1e-4c0b-a9e7-749fe301d421',
            usernameVariable: 'GIT_USERNAME',
            passwordVariable: 'GIT_PASSWORD']]) {
                sh("git remote add origin https://${GIT_USERNAME}:${GIT_PASSWORD}@gogs-cicd.master0.ipaas.zhonglele.com/gogs/${appName}.git")
                sh("git push origin master:${branchName}")
        }
    }

    stage("Build") {
    }

    stage ('Deploy DEV') {
      sh "oc project ${DEV_PROJECT}"
      sh "oc delete all -l app=${appName} -n ${DEV_PROJECT}"
      sh "oc new-build --name=${appName} --image-stream=nginx:1.13 --binary=true --labels=app=${appName} -n ${DEV_PROJECT} || true"
      // build image
      sh "oc start-build ${appName} --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
      // deploy image
      sh "oc new-app ${appName}:latest -n ${DEV_PROJECT}"
      sh "oc expose svc/${appName} -n ${DEV_PROJECT}"
    }

    stage ('Deploy TEST') {
      timeout(time:5, unit:'MINUTES') {
         input message: "Promote to TEST?", ok: "Promote"
      }
      def v = version()
      // tag for test
      sh "oc tag ${DEV_PROJECT}/${appName}:latest ${TEST_PROJECT}/${appName}:${v}"
      sh "oc project ${TEST_PROJECT}"
      // clean up. keep the imagestream
      sh "oc delete bc,dc,svc,route -l app=${appName} -n ${TEST_PROJECT}"
      // deploy stage image
      sh "oc new-app ${appName}:${v} -n ${TEST_PROJECT}"
      sh "oc expose svc/${appName} -n ${TEST_PROJECT}"
    }

    stage ('Deploy STAGE') {
      timeout(time:5, unit:'MINUTES') {
         input message: "Promote to STAGE?", ok: "Promote"
      }
      def v = version()
      // tag for stage
      sh "oc tag ${DEV_PROJECT}/${appName}:latest ${STAGE_PROJECT}/${appName}:${v}"
      sh "oc project ${STAGE_PROJECT}"
      // clean up. keep the imagestream
      sh "oc delete bc,dc,svc,route -l app=${appName} -n ${STAGE_PROJECT}"
      // deploy stage image
      sh "oc new-app ${appName}:${v} -n ${STAGE_PROJECT}"
      sh "oc expose svc/${appName} -n ${STAGE_PROJECT}"
    }
}
