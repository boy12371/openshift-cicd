node {
    // define value
    def branchName    = System.currentTimeMillis()
    def appName       = "zk-finance"
    def DEV_PROJECT   = "dev"
    def TEST_PROJECT  = "test"
    def STAGE_PROJECT = "stage"
    env.JAVA_HOME = "${tool 'JDK8'}"

    stage('Checkout svn') {
      checkout([$class: 'SubversionSCM',
        additionalCredentials: [],
        excludedCommitMessages: '',
        excludedRegions: '',
        excludedRevprop: '',
        excludedUsers: 'buildbot',
        filterChangelog: false,
        ignoreDirPropChanges: false,
        includedRegions: '',
        locations: [[credentialsId: '844cbc39-0037-4e97-a1d2-b371a70cfd9c',
            depthOption: 'infinity',
            ignoreExternalsOption: true,
            local: './',
            remote: "http://svn.ipaas.zhonglele.com/projects/branches/${appName}"]],
        workspaceUpdater: [$class: 'UpdateUpdater']])
    }

    stage("Push to gogs") {
        echo "Push to gogs"
        sh "echo '# ${appName}' > README.md"
        sh "echo -e '.settings\n.classpath\n.project\ntarget' > .gitignore"
        sh "rm -rf .settings .classpath .project target"
        sh "git init"
        sh "git config user.name 'gogs' && git config user.email 'gogs@cn.com' && git config http.sslVerify false"
        sh "git add . && git commit -m \"${branchName}\""
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
            credentialsId: 'dc989f32-73d7-489e-a808-c9b4c3115e0a',
            usernameVariable: 'GIT_USERNAME',
            passwordVariable: 'GIT_PASSWORD']]) {
                sh("git remote add origin https://${GIT_USERNAME}:${GIT_PASSWORD}@gogs-cicd.master0.ipaas.zhonglele.com/gogs/${appName}.git")
                sh("git push origin master:${branchName}")
        }
        sh "rm -rf * .git .svn .gitignore"
    }

    stage ('Build') {
        sh "git init && git config http.sslVerify false"
        git url: "https://gogs-cicd.master0.ipaas.zhonglele.com/gogs/${appName}.git", branch: "${branchName}", credentialsId:'dc989f32-73d7-489e-a808-c9b4c3115e0a'

        withMaven(maven: 'M3_HOME', mavenSettingsConfig: '1ba0ed09-4177-40c4-b51d-ecbd9dc624ec', mavenLocalRepo: '/var/lib/jenkins/.m2/repository') {
            sh "mvn clean install -DskipTests=true -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true"
        }
    }

    stage ('Push to Nexus') {
        version = version()
        withMaven(maven: 'M3_HOME', mavenSettingsConfig: '1ba0ed09-4177-40c4-b51d-ecbd9dc624ec', mavenLocalRepo: '/var/lib/jenkins/.m2/repository') {
            sh "mvn versions:set -DnewVersion=${version}-SNAPSHOT -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true"
            sh "mvn deploy -DskipTests=true -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true"
        }
    }

    stage ('Deploy DEV') {
      sh "rm -rf oc-build && mkdir -p oc-build/deployments"
      sh "cp target/${appName}.war oc-build/deployments/ROOT.war"
      sh "oc project ${DEV_PROJECT}"
      // clean up. keep the image stream
      sh "oc delete all -l app=${appName} -n ${DEV_PROJECT}"
      sh "oc delete rolebinding default_edit"
      sh "oc delete all -l app=${appName} -n ${DEV_PROJECT}"
      // create build. override the exit code since it complains about exising imagestream
      sh "oc new-build --name=${appName}  --image-stream=openshift/jboss-eap70-openshift:1.4-34 --binary=true --labels=app=${appName} -n ${DEV_PROJECT} || true"
      // build image
      sh "oc start-build ${appName} --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
      // deploy image
      sh "oc process -f deploy.yaml |oc create -f -"
      sh "oc expose svc/${appName} -n ${DEV_PROJECT}"
    }

    stage ('Deploy TEST') {
      timeout(time:5, unit:'MINUTES') {
         input message: "Promote to TEST?", ok: "Promote"
      }
      def v = version()
      // tag for test
      sh "oc tag ${DEV_PROJECT}/${appName}:latest ${TEST_PROJECT}/${appName}:${v}"
      sh "oc project ${TEST_PROJECT}"
      // clean up. keep the imagestream
      sh "oc delete bc,dc,svc,route -l app=${appName} -n ${TEST_PROJECT}"
      // deploy stage image
      sh "oc new-app ${appName}:${v} -n ${TEST_PROJECT}"
      sh "oc expose svc/${appName} -n ${TEST_PROJECT}"
    }

    stage ('Deploy STAGE') {
      timeout(time:5, unit:'MINUTES') {
         input message: "Promote to STAGE?", ok: "Promote"
      }
      def v = version()
      // tag for stage
      sh "oc tag ${DEV_PROJECT}/${appName}:latest ${STAGE_PROJECT}/${appName}:${v}"
      sh "oc project ${STAGE_PROJECT}"
      // clean up. keep the imagestream
      sh "oc delete bc,dc,svc,route -l app=${appName} -n ${STAGE_PROJECT}"
      // deploy stage image
      sh "oc new-app ${appName}:${v} -n ${STAGE_PROJECT}"
      sh "oc expose svc/${appName} -n ${STAGE_PROJECT}"
    }
}

def version() {
    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
    matcher ? matcher[0][1] : null
}
